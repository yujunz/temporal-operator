// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go syscall

package syscall

_#sizeofPtr:      0x8
_#sizeofShort:    0x2
_#sizeofInt:      0x4
_#sizeofLong:     0x8
_#sizeofLongLong: 0x8

_#_C_short: int16

_#_C_int: int32

_#_C_long: int64

_#_C_long_long: int64

#Timespec: {
	Sec:  int64
	Nsec: int64
}

#Timeval: {
	Sec:       int64
	Usec:      int32
	Pad_cgo_0: bytes @go(,[4]byte)
}

#Timeval32: {
	Sec:  int32
	Usec: int32
}

#Rusage: {
	Utime:    #Timeval
	Stime:    #Timeval
	Maxrss:   int64
	Ixrss:    int64
	Idrss:    int64
	Isrss:    int64
	Minflt:   int64
	Majflt:   int64
	Nswap:    int64
	Inblock:  int64
	Oublock:  int64
	Msgsnd:   int64
	Msgrcv:   int64
	Nsignals: int64
	Nvcsw:    int64
	Nivcsw:   int64
}

#Rlimit: {
	Cur: uint64
	Max: uint64
}

_#_Gid_t: uint32

#Stat_t: {
	Dev:           int32
	Mode:          uint16
	Nlink:         uint16
	Ino:           uint64
	Uid:           uint32
	Gid:           uint32
	Rdev:          int32
	Pad_cgo_0:     bytes @go(,[4]byte)
	Atimespec:     #Timespec
	Mtimespec:     #Timespec
	Ctimespec:     #Timespec
	Birthtimespec: #Timespec
	Size:          int64
	Blocks:        int64
	Blksize:       int32
	Flags:         uint32
	Gen:           uint32
	Lspare:        int32
	Qspare:        2 * [int64] @go(,[2]int64)
}

#Statfs_t: {
	Bsize:       uint32
	Iosize:      int32
	Blocks:      uint64
	Bfree:       uint64
	Bavail:      uint64
	Files:       uint64
	Ffree:       uint64
	Fsid:        #Fsid
	Owner:       uint32
	Type:        uint32
	Flags:       uint32
	Fssubtype:   uint32
	Fstypename:  16 * [int8]   @go(,[16]int8)
	Mntonname:   1024 * [int8] @go(,[1024]int8)
	Mntfromname: 1024 * [int8] @go(,[1024]int8)
	Reserved:    8 * [uint32]  @go(,[8]uint32)
}

#Flock_t: {
	Start:  int64
	Len:    int64
	Pid:    int32
	Type:   int16
	Whence: int16
}

#Fstore_t: {
	Flags:      uint32
	Posmode:    int32
	Offset:     int64
	Length:     int64
	Bytesalloc: int64
}

#Radvisory_t: {
	Offset:    int64
	Count:     int32
	Pad_cgo_0: bytes @go(,[4]byte)
}

#Fbootstraptransfer_t: {
	Offset:  int64
	Length:  uint64
	Buffer?: null | uint8 @go(,*byte)
}

#Log2phys_t: {
	Flags:       uint32
	Contigbytes: int64
	Devoffset:   int64
}

#Fsid: {
	Val: 2 * [int32] @go(,[2]int32)
}

#Dirent: {
	Ino:       uint64
	Seekoff:   uint64
	Reclen:    uint16
	Namlen:    uint16
	Type:      uint8
	Name:      1024 * [int8] @go(,[1024]int8)
	Pad_cgo_0: bytes         @go(,[3]byte)
}

_#pathMax: 0x400

#RawSockaddrInet4: {
	Len:    uint8
	Family: uint8
	Port:   uint16
	Addr:   bytes      @go(,[4]byte)
	Zero:   8 * [int8] @go(,[8]int8)
}

#RawSockaddrInet6: {
	Len:      uint8
	Family:   uint8
	Port:     uint16
	Flowinfo: uint32
	Addr:     bytes @go(,[16]byte)
	Scope_id: uint32
}

#RawSockaddrUnix: {
	Len:    uint8
	Family: uint8
	Path:   104 * [int8] @go(,[104]int8)
}

#RawSockaddrDatalink: {
	Len:    uint8
	Family: uint8
	Index:  uint16
	Type:   uint8
	Nlen:   uint8
	Alen:   uint8
	Slen:   uint8
	Data:   12 * [int8] @go(,[12]int8)
}

#RawSockaddr: {
	Len:    uint8
	Family: uint8
	Data:   14 * [int8] @go(,[14]int8)
}

#RawSockaddrAny: {
	Addr: #RawSockaddr
	Pad:  92 * [int8] @go(,[92]int8)
}

_#_Socklen: uint32

#Linger: {
	Onoff:  int32
	Linger: int32
}

#Iovec: {
	Base?: null | uint8 @go(,*byte)
	Len:   uint64
}

#IPMreq: {
	Multiaddr: bytes @go(,[4]byte)
	Interface: bytes @go(,[4]byte)
}

#IPv6Mreq: {
	Multiaddr: bytes @go(,[16]byte)
	Interface: uint32
}

#Msghdr: {
	Name?:      null | uint8 @go(,*byte)
	Namelen:    uint32
	Pad_cgo_0:  bytes         @go(,[4]byte)
	Iov?:       null | #Iovec @go(,*Iovec)
	Iovlen:     int32
	Pad_cgo_1:  bytes        @go(,[4]byte)
	Control?:   null | uint8 @go(,*byte)
	Controllen: uint32
	Flags:      int32
}

#Cmsghdr: {
	Len:   uint32
	Level: int32
	Type:  int32
}

#Inet4Pktinfo: {
	Ifindex:  uint32
	Spec_dst: bytes @go(,[4]byte)
	Addr:     bytes @go(,[4]byte)
}

#Inet6Pktinfo: {
	Addr:    bytes @go(,[16]byte)
	Ifindex: uint32
}

#IPv6MTUInfo: {
	Addr: #RawSockaddrInet6
	Mtu:  uint32
}

#ICMPv6Filter: {
	Filt: 8 * [uint32] @go(,[8]uint32)
}

#SizeofSockaddrInet4:    0x10
#SizeofSockaddrInet6:    0x1c
#SizeofSockaddrAny:      0x6c
#SizeofSockaddrUnix:     0x6a
#SizeofSockaddrDatalink: 0x14
#SizeofLinger:           0x8
#SizeofIPMreq:           0x8
#SizeofIPv6Mreq:         0x14
#SizeofMsghdr:           0x30
#SizeofCmsghdr:          0xc
#SizeofInet4Pktinfo:     0xc
#SizeofInet6Pktinfo:     0x14
#SizeofIPv6MTUInfo:      0x20
#SizeofICMPv6Filter:     0x20

#PTRACE_TRACEME: 0x0
#PTRACE_CONT:    0x7
#PTRACE_KILL:    0x8

#Kevent_t: {
	Ident:  uint64
	Filter: int16
	Flags:  uint16
	Fflags: uint32
	Data:   int64
	Udata?: null | uint8 @go(,*byte)
}

#FdSet: {
	Bits: 32 * [int32] @go(,[32]int32)
}

#SizeofIfMsghdr:    0x70
#SizeofIfData:      0x60
#SizeofIfaMsghdr:   0x14
#SizeofIfmaMsghdr:  0x10
#SizeofIfmaMsghdr2: 0x14
#SizeofRtMsghdr:    0x5c
#SizeofRtMetrics:   0x38

#IfMsghdr: {
	Msglen:    uint16
	Version:   uint8
	Type:      uint8
	Addrs:     int32
	Flags:     int32
	Index:     uint16
	Pad_cgo_0: bytes @go(,[2]byte)
	Data:      #IfData
}

#IfData: {
	Type:       uint8
	Typelen:    uint8
	Physical:   uint8
	Addrlen:    uint8
	Hdrlen:     uint8
	Recvquota:  uint8
	Xmitquota:  uint8
	Unused1:    uint8
	Mtu:        uint32
	Metric:     uint32
	Baudrate:   uint32
	Ipackets:   uint32
	Ierrors:    uint32
	Opackets:   uint32
	Oerrors:    uint32
	Collisions: uint32
	Ibytes:     uint32
	Obytes:     uint32
	Imcasts:    uint32
	Omcasts:    uint32
	Iqdrops:    uint32
	Noproto:    uint32
	Recvtiming: uint32
	Xmittiming: uint32
	Lastchange: #Timeval32
	Unused2:    uint32
	Hwassist:   uint32
	Reserved1:  uint32
	Reserved2:  uint32
}

#IfaMsghdr: {
	Msglen:    uint16
	Version:   uint8
	Type:      uint8
	Addrs:     int32
	Flags:     int32
	Index:     uint16
	Pad_cgo_0: bytes @go(,[2]byte)
	Metric:    int32
}

#IfmaMsghdr: {
	Msglen:    uint16
	Version:   uint8
	Type:      uint8
	Addrs:     int32
	Flags:     int32
	Index:     uint16
	Pad_cgo_0: bytes @go(,[2]byte)
}

#IfmaMsghdr2: {
	Msglen:    uint16
	Version:   uint8
	Type:      uint8
	Addrs:     int32
	Flags:     int32
	Index:     uint16
	Pad_cgo_0: bytes @go(,[2]byte)
	Refcount:  int32
}

#RtMsghdr: {
	Msglen:    uint16
	Version:   uint8
	Type:      uint8
	Index:     uint16
	Pad_cgo_0: bytes @go(,[2]byte)
	Flags:     int32
	Addrs:     int32
	Pid:       int32
	Seq:       int32
	Errno:     int32
	Use:       int32
	Inits:     uint32
	Rmx:       #RtMetrics
}

#RtMetrics: {
	Locks:    uint32
	Mtu:      uint32
	Hopcount: uint32
	Expire:   int32
	Recvpipe: uint32
	Sendpipe: uint32
	Ssthresh: uint32
	Rtt:      uint32
	Rttvar:   uint32
	Pksent:   uint32
	Filler:   4 * [uint32] @go(,[4]uint32)
}

#SizeofBpfVersion: 0x4
#SizeofBpfStat:    0x8
#SizeofBpfProgram: 0x10
#SizeofBpfInsn:    0x8
#SizeofBpfHdr:     0x14

#BpfVersion: {
	Major: uint16
	Minor: uint16
}

#BpfStat: {
	Recv: uint32
	Drop: uint32
}

#BpfProgram: {
	Len:       uint32
	Pad_cgo_0: bytes           @go(,[4]byte)
	Insns?:    null | #BpfInsn @go(,*BpfInsn)
}

#BpfInsn: {
	Code: uint16
	Jt:   uint8
	Jf:   uint8
	K:    uint32
}

#BpfHdr: {
	Tstamp:    #Timeval32
	Caplen:    uint32
	Datalen:   uint32
	Hdrlen:    uint16
	Pad_cgo_0: bytes @go(,[2]byte)
}

_#_AT_FDCWD: -2

#Termios: {
	Iflag:     uint64
	Oflag:     uint64
	Cflag:     uint64
	Lflag:     uint64
	Cc:        20 * [uint8] @go(,[20]uint8)
	Pad_cgo_0: bytes        @go(,[4]byte)
	Ispeed:    uint64
	Ospeed:    uint64
}
