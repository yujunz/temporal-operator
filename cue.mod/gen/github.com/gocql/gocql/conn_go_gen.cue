// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/gocql/gocql

package gocql

import (
	"crypto/tls"
	"time"
)

#Authenticator: _

#PasswordAuthenticator: {
	Username: string
	Password: string
	AllowedAuthenticators: [...string] @go(,[]string)
}

// SslOptions configures TLS use.
//
// Warning: Due to historical reasons, the SslOptions is insecure by default, so you need to set EnableHostVerification
// to true if no Config is set. Most users should set SslOptions.Config to a *tls.Config.
// SslOptions and Config.InsecureSkipVerify interact as follows:
//
//	Config.InsecureSkipVerify | EnableHostVerification | Result
//	Config is nil             | false                  | do not verify host
//	Config is nil             | true                   | verify host
//	false                     | false                  | verify host
//	true                      | false                  | do not verify host
//	false                     | true                   | verify host
//	true                      | true                   | verify host
#SslOptions: {
	Config?: null | tls.#Config @go(,*tls.Config)

	// CertPath and KeyPath are optional depending on server
	// config, but both fields must be omitted to avoid using a
	// client certificate
	CertPath: string
	KeyPath:  string
	CaPath:   string

	// If you want to verify the hostname and server cert (like a wildcard for cass cluster) then you should turn this
	// on.
	// This option is basically the inverse of tls.Config.InsecureSkipVerify.
	// See InsecureSkipVerify in http://golang.org/pkg/crypto/tls/ for more info.
	//
	// See SslOptions documentation to see how EnableHostVerification interacts with the provided tls.Config.
	EnableHostVerification: bool
}

#ConnConfig: {
	ProtoVersion:   int
	CQLVersion:     string
	Timeout:        time.#Duration
	WriteTimeout:   time.#Duration
	ConnectTimeout: time.#Duration
	Dialer:         #Dialer
	HostDialer:     #HostDialer
	Compressor:     #Compressor
	Authenticator:  #Authenticator
	Keepalive:      time.#Duration
	Logger:         #StdLogger
}

#ConnErrorHandler: _

// contextWriter is like io.Writer, but takes context as well.
_#contextWriter: _

_#deadlineWriter: _

// StreamObserver is notified about request/response pairs.
// Streams are created for executing queries/batches or
// internal requests to the database and might live longer than
// execution of the query - the stream is still tracked until
// response arrives so that stream IDs are not reused.
#StreamObserver: _

// StreamObserverContext is notified about state of a stream.
// A stream is started every time a request is written to the server
// and is finished when a response is received.
// It is abandoned when the underlying network connection is closed
// before receiving a response.
#StreamObserverContext: _
