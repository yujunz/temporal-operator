// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/gocql/gocql

package gocql

import "time"

// RetryableQuery is an interface that represents a query or batch statement that
// exposes the correct functions for the retry policy logic to evaluate correctly.
#RetryableQuery: _

#RetryType: uint16 // #enumRetryType

#enumRetryType:
	#Retry |
	#RetryNextHost |
	#Ignore |
	#Rethrow

#values_RetryType: {
	Retry:         #Retry
	RetryNextHost: #RetryNextHost
	Ignore:        #Ignore
	Rethrow:       #Rethrow
}

#Retry:         #RetryType & 0x00
#RetryNextHost: #RetryType & 0x01
#Ignore:        #RetryType & 0x02
#Rethrow:       #RetryType & 0x03

// RetryPolicy interface is used by gocql to determine if a query can be attempted
// again after a retryable error has been received. The interface allows gocql
// users to implement their own logic to determine if a query can be attempted
// again.
//
// See SimpleRetryPolicy as an example of implementing and using a RetryPolicy
// interface.
#RetryPolicy: _

// SimpleRetryPolicy has simple logic for attempting a query a fixed number of times.
//
// See below for examples of usage:
//
//	//Assign to the cluster
//	cluster.RetryPolicy = &gocql.SimpleRetryPolicy{NumRetries: 3}
//
//	//Assign to a query
//	query.RetryPolicy(&gocql.SimpleRetryPolicy{NumRetries: 1})
#SimpleRetryPolicy: {
	NumRetries: int
}

// ExponentialBackoffRetryPolicy sleeps between attempts
#ExponentialBackoffRetryPolicy: {
	NumRetries: int
	Min:        time.#Duration
	Max:        time.#Duration
}

#DowngradingConsistencyRetryPolicy: {
	ConsistencyLevelsToTry: [...#Consistency] @go(,[]Consistency)
}

#HostStateNotifier: _

#KeyspaceUpdateEvent: {
	Keyspace: string
	Change:   string
}

#HostTierer: _

// HostSelectionPolicy is an interface for selecting
// the most appropriate host to execute a given query.
// HostSelectionPolicy instances cannot be shared between sessions.
#HostSelectionPolicy: _

// SelectedHost is an interface returned when picking a host from a host
// selection policy.
#SelectedHost: _

// ReadyPolicy defines a policy for when a HostSelectionPolicy can be used. After
// each host connects during session initialization, the Ready method will be
// called. If you only need a single Host to be up you can wrap a
// HostSelectionPolicy policy with SingleHostReadyPolicy.
#ReadyPolicy: _

_#singleHostReadyPolicy: HostSelectionPolicy: #HostSelectionPolicy

// ConvictionPolicy interface is used by gocql to determine if a host should be
// marked as DOWN based on the error and host info
#ConvictionPolicy: _

// SimpleConvictionPolicy implements a ConvictionPolicy which convicts all hosts
// regardless of error
#SimpleConvictionPolicy: {
}

// ReconnectionPolicy interface is used by gocql to determine if reconnection
// can be attempted after connection error. The interface allows gocql users
// to implement their own logic to determine how to attempt reconnection.
#ReconnectionPolicy: _

// ConstantReconnectionPolicy has simple logic for returning a fixed reconnection interval.
//
// Examples of usage:
//
//	cluster.ReconnectionPolicy = &gocql.ConstantReconnectionPolicy{MaxRetries: 10, Interval: 8 * time.Second}
#ConstantReconnectionPolicy: {
	MaxRetries: int
	Interval:   time.#Duration
}

// ExponentialReconnectionPolicy returns a growing reconnection interval.
#ExponentialReconnectionPolicy: {
	MaxRetries:      int
	InitialInterval: time.#Duration
	MaxInterval:     time.#Duration
}

#SpeculativeExecutionPolicy: _

#NonSpeculativeExecution: {
}

#SimpleSpeculativeExecution: {
	NumAttempts:  int
	TimeoutDelay: time.#Duration
}
