// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/gocql/gocql

package gocql

import "time"

#QueryInfo: {
	Id: bytes @go(,[]byte)
	Args: [...#ColumnInfo] @go(,[]ColumnInfo)
	Rval: [...#ColumnInfo] @go(,[]ColumnInfo)
	PKeyColumns: [...int] @go(,[]int)
}

_#hostMetrics: {
	// Attempts is count of how many times this query has been attempted for this host.
	// An attempt is either a retry or fetching next page of results.
	Attempts: int

	// TotalLatency is the sum of attempt latencies for this host in nanoseconds.
	TotalLatency: int64
}

#Scanner: _

#Batch: {
	Type: #BatchType
	Entries: [...#BatchEntry] @go(,[]BatchEntry)
	Cons: #Consistency
	CustomPayload: {[string]: bytes} @go(,map[string][]byte)
}

#BatchType: uint8 // #enumBatchType

#enumBatchType:
	#LoggedBatch |
	#UnloggedBatch |
	#CounterBatch

#values_BatchType: {
	LoggedBatch:   #LoggedBatch
	UnloggedBatch: #UnloggedBatch
	CounterBatch:  #CounterBatch
}

#LoggedBatch:   #BatchType & 0
#UnloggedBatch: #BatchType & 1
#CounterBatch:  #BatchType & 2

#BatchEntry: {
	Stmt: string
	Args: [...] @go(,[]interface{})
	Idempotent: bool
}

#ColumnInfo: {
	Keyspace: string
	Table:    string
	Name:     string
	TypeInfo: #TypeInfo
}

// Tracer is the interface implemented by query tracers. Tracers have the
// ability to obtain a detailed event log of all events that happened during
// the execution of a query from Cassandra. Gathering this information might
// be essential for debugging and optimizing queries, but this feature should
// not be used on production systems with very high load.
#Tracer: _

#ObservedQuery: {
	Keyspace:  string
	Statement: string

	// Values holds a slice of bound values for the query.
	// Do not modify the values here, they are shared with multiple goroutines.
	Values: [...] @go(,[]interface{})
	Start: time.Time
	End:   time.Time

	// Rows is the number of rows in the current iter.
	// In paginated queries, rows from previous scans are not counted.
	// Rows is not used in batch queries and remains at the default value
	Rows: int

	// The metrics per this host
	Metrics?: null | _#hostMetrics @go(,*hostMetrics)

	// Err is the error in the query.
	// It only tracks network errors or errors of bad cassandra syntax, in particular selects with no match return nil error
	Err: _ @go(,error)

	// Attempt is the index of attempt at executing this query.
	// The first attempt is number zero and any retries have non-zero attempt number.
	Attempt: int
}

// QueryObserver is the interface implemented by query observers / stat collectors.
//
// Experimental, this interface and use may change
#QueryObserver: _

#ObservedBatch: {
	Keyspace: string
	Statements: [...string] @go(,[]string)

	// Values holds a slice of bound values for each statement.
	// Values[i] are bound values passed to Statements[i].
	// Do not modify the values here, they are shared with multiple goroutines.
	Values: [...[...]] @go(,[][]interface{})
	Start: time.Time
	End:   time.Time

	// Err is the error in the batch query.
	// It only tracks network errors or errors of bad cassandra syntax, in particular selects with no match return nil error
	Err: _ @go(,error)

	// The metrics per this host
	Metrics?: null | _#hostMetrics @go(,*hostMetrics)

	// Attempt is the index of attempt at executing this query.
	// The first attempt is number zero and any retries have non-zero attempt number.
	Attempt: int
}

// BatchObserver is the interface implemented by batch observers / stat collectors.
#BatchObserver: _

#ObservedConnect: {
	Start: time.Time
	End:   time.Time

	// Err is the connection error (if any)
	Err: _ @go(,error)
}

// ConnectObserver is the interface implemented by connect observers / stat collectors.
#ConnectObserver: _

#Error: {
	Code:    int
	Message: string
}

#BatchSizeMaximum: 65535
