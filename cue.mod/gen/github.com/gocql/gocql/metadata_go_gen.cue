// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/gocql/gocql

package gocql

// schema metadata for a keyspace
#KeyspaceMetadata: {
	Name:          string
	DurableWrites: bool
	StrategyClass: string
	StrategyOptions: {...} @go(,map[string]interface{})
	Tables: {[string]: null | #TableMetadata} @go(,map[string]*TableMetadata)
	Functions: {[string]: null | #FunctionMetadata} @go(,map[string]*FunctionMetadata)
	Aggregates: {[string]: null | #AggregateMetadata} @go(,map[string]*AggregateMetadata)

	// Deprecated: use the MaterializedViews field for views and UserTypes field for udts instead.
	Views: {[string]: null | #ViewMetadata} @go(,map[string]*ViewMetadata)
	MaterializedViews: {[string]: null | #MaterializedViewMetadata} @go(,map[string]*MaterializedViewMetadata)
	UserTypes: {[string]: null | #UserTypeMetadata} @go(,map[string]*UserTypeMetadata)
}

// schema metadata for a table (a.k.a. column family)
#TableMetadata: {
	Keyspace:         string
	Name:             string
	KeyValidator:     string
	Comparator:       string
	DefaultValidator: string
	KeyAliases: [...string] @go(,[]string)
	ColumnAliases: [...string] @go(,[]string)
	ValueAlias: string
	PartitionKey: [...null | #ColumnMetadata] @go(,[]*ColumnMetadata)
	ClusteringColumns: [...null | #ColumnMetadata] @go(,[]*ColumnMetadata)
	Columns: {[string]: null | #ColumnMetadata} @go(,map[string]*ColumnMetadata)
	OrderedColumns: [...string] @go(,[]string)
}

// schema metadata for a column
#ColumnMetadata: {
	Keyspace:        string
	Table:           string
	Name:            string
	ComponentIndex:  int
	Kind:            #ColumnKind
	Validator:       string
	Type:            #TypeInfo
	ClusteringOrder: string
	Order:           #ColumnOrder
	Index:           #ColumnIndexMetadata
}

// FunctionMetadata holds metadata for function constructs
#FunctionMetadata: {
	Keyspace: string
	Name:     string
	ArgumentTypes: [...#TypeInfo] @go(,[]TypeInfo)
	ArgumentNames: [...string] @go(,[]string)
	Body:              string
	CalledOnNullInput: bool
	Language:          string
	ReturnType:        #TypeInfo
}

// AggregateMetadata holds metadata for aggregate constructs
#AggregateMetadata: {
	Keyspace: string
	Name:     string
	ArgumentTypes: [...#TypeInfo] @go(,[]TypeInfo)
	FinalFunc:  #FunctionMetadata
	InitCond:   string
	ReturnType: #TypeInfo
	StateFunc:  #FunctionMetadata
	StateType:  #TypeInfo
}

// ViewMetadata holds the metadata for views.
// Deprecated: this is kept for backwards compatibility issues. Use MaterializedViewMetadata.
#ViewMetadata: {
	Keyspace: string
	Name:     string
	FieldNames: [...string] @go(,[]string)
	FieldTypes: [...#TypeInfo] @go(,[]TypeInfo)
}

// MaterializedViewMetadata holds the metadata for materialized views.
#MaterializedViewMetadata: {
	Keyspace:            string
	Name:                string
	BaseTableId:         #UUID
	BaseTable?:          null | #TableMetadata @go(,*TableMetadata)
	BloomFilterFpChance: float64
	Caching: {[string]: string} @go(,map[string]string)
	Comment: string
	Compaction: {[string]: string} @go(,map[string]string)
	Compression: {[string]: string} @go(,map[string]string)
	CrcCheckChance:          float64
	DcLocalReadRepairChance: float64
	DefaultTimeToLive:       int
	Extensions: {[string]: string} @go(,map[string]string)
	GcGraceSeconds:          int
	Id:                      #UUID
	IncludeAllColumns:       bool
	MaxIndexInterval:        int
	MemtableFlushPeriodInMs: int
	MinIndexInterval:        int
	ReadRepairChance:        float64
	SpeculativeRetry:        string
}

#UserTypeMetadata: {
	Keyspace: string
	Name:     string
	FieldNames: [...string] @go(,[]string)
	FieldTypes: [...#TypeInfo] @go(,[]TypeInfo)
}

// the ordering of the column with regard to its comparator
#ColumnOrder: bool // #enumColumnOrder

#enumColumnOrder:
	#ASC |
	#DESC

#values_ColumnOrder: {
	ASC:  #ASC
	DESC: #DESC
}

#ASC:  #ColumnOrder & false
#DESC: #ColumnOrder & true

#ColumnIndexMetadata: {
	Name: string
	Type: string
	Options: {...} @go(,map[string]interface{})
}

#ColumnKind: int // #enumColumnKind

#enumColumnKind:
	#ColumnUnkownKind |
	#ColumnPartitionKey |
	#ColumnClusteringKey |
	#ColumnRegular |
	#ColumnCompact |
	#ColumnStatic

#values_ColumnKind: {
	ColumnUnkownKind:    #ColumnUnkownKind
	ColumnPartitionKey:  #ColumnPartitionKey
	ColumnClusteringKey: #ColumnClusteringKey
	ColumnRegular:       #ColumnRegular
	ColumnCompact:       #ColumnCompact
	ColumnStatic:        #ColumnStatic
}

#ColumnUnkownKind:    #ColumnKind & 0
#ColumnPartitionKey:  #ColumnKind & 1
#ColumnClusteringKey: #ColumnKind & 2
#ColumnRegular:       #ColumnKind & 3
#ColumnCompact:       #ColumnKind & 4
#ColumnStatic:        #ColumnKind & 5

#DEFAULT_KEY_ALIAS:    "key"
#DEFAULT_COLUMN_ALIAS: "column"
#DEFAULT_VALUE_ALIAS:  "value"

#REVERSED_TYPE:   "org.apache.cassandra.db.marshal.ReversedType"
#COMPOSITE_TYPE:  "org.apache.cassandra.db.marshal.CompositeType"
#COLLECTION_TYPE: "org.apache.cassandra.db.marshal.ColumnToCollectionType"
#LIST_TYPE:       "org.apache.cassandra.db.marshal.ListType"
#SET_TYPE:        "org.apache.cassandra.db.marshal.SetType"
#MAP_TYPE:        "org.apache.cassandra.db.marshal.MapType"
