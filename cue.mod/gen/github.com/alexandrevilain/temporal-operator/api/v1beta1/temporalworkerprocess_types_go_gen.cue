// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/alexandrevilain/temporal-operator/api/v1beta1

package v1beta1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TemporalWorkerProcessSpec defines the desired state of TemporalWorkerProcess.
#TemporalWorkerProcessSpec: {
	// Reference to the temporal cluster the worker will connect to.
	clusterRef?: null | #TemporalClusterReference @go(ClusterRef,*TemporalClusterReference)

	// Version defines the worker process version.
	// +optional
	version: string @go(Version)

	// Image defines the temporal worker docker image the instance should run.
	image: string @go(Image)

	// JobTTLSecondsAfterFinished is amount of time to keep job pods after jobs are completed.
	// Defaults to 300 seconds.
	// +optional
	//+kubebuilder:default:=300
	//+kubebuilder:validation:Minimum=1
	jobTtlSecondsAfterFinished?: null | int32 @go(JobTTLSecondsAfterFinished,*int32)

	// Number of desired replicas. Default to 1.
	// +kubebuilder:validation:Minimum=1
	// +optional
	replicas?: null | int32 @go(Replicas,*int32)

	// Image pull policy for determining how to pull worker process images.
	pullPolicy?: corev1.#PullPolicy @go(PullPolicy)

	// An optional list of references to secrets in the same namespace
	// to use for pulling temporal images from registries.
	// +optional
	imagePullSecrets?: [...corev1.#LocalObjectReference] @go(ImagePullSecrets,[]corev1.LocalObjectReference)

	// TemporalNamespace that worker will poll.
	temporalNamespace: string @go(TemporalNamespace)

	// Builder is the configuration for building a TemporalWorkerProcess.
	// THIS FEATURE IS HIGHLY EXPERIMENTAL.
	builder?: null | #TemporalWorkerProcessBuilder @go(Builder,*TemporalWorkerProcessBuilder)
}

// TemporalWorkerProcessStatus defines the observed state of TemporalWorkerProcess.
#TemporalWorkerProcessStatus: {
	// Created indicates if the worker process image was created.
	// +optional
	created: bool @go(Created)

	// Ready defines if the worker process is ready.
	// +optional
	ready: bool @go(Ready)

	// Version is the version of the image that will be used to build worker image.
	// +optional
	version: string @go(Version)

	// BuildAttempt is the build attempt number of a given version
	// +optional
	attempt?: null | int32 @go(BuildAttempt,*int32)

	// Conditions represent the latest available observations of the worker process state.
	conditions: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)
}

#TemporalWorkerProcessBuilder: {
	// Enabled defines if the operator should build the temporal worker process.
	// +required
	enabled: bool @go(Enabled)

	// Version is the version of the image that will be used to build worker image.
	version?: string @go(Version)

	// BuildAttempt is the build attempt number of a given version
	attempt?: null | int32 @go(BuildAttempt,*int32)

	// Image is the image that will be used to build worker image.
	image?: string @go(Image)

	// BuildDir is the location of where the sources will be built.
	buildDir?: string @go(BuildDir)

	// GitRepository specifies how to connect to Git source control.
	gitRepository?: null | #GitRepositorySpec @go(GitRepository,*GitRepositorySpec)

	// BuildRegistry specifies how to connect to container registry.
	buildRegistry?: null | #ContainerRegistryConfig @go(BuildRegistry,*ContainerRegistryConfig)
}

// GitRepositorySpec specifies the required configuration to produce an
// Artifact for a Git repository.
#GitRepositorySpec: {
	// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
	// +kubebuilder:validation:Pattern="^(http|https|ssh)://.*$"
	// +required
	url: string @go(URL)

	// Reference specifies the Git reference to resolve and monitor for
	// changes, defaults to the 'master' branch.
	// +optional
	reference?: null | #GitRepositoryRef @go(Reference,*GitRepositoryRef)
}

// GitRepositoryRef specifies the Git reference to resolve and checkout.
#GitRepositoryRef: {
	// Branch to check out, defaults to 'main' if no other field is defined.
	// +optional
	branch?: string @go(Branch)
}

// ContainerRegistryConfig specifies the parameters to connect with desired container repository.
#ContainerRegistryConfig: {
	// Repository is the fqdn to the image repo.
	// +required
	repository: string @go(Repository)

	// Username is the username for the container repo.
	// +required
	username: string @go(Username)

	// PasswordSecret is the reference to the secret holding the docker repo password.
	// +required
	passwordSecretRef: #SecretKeyReference @go(PasswordSecretRef)
}

// TemporalWorkerProcess is the Schema for the temporalworkerprocesses API.
#TemporalWorkerProcess: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec?:     #TemporalWorkerProcessSpec   @go(Spec)
	status?:   #TemporalWorkerProcessStatus @go(Status)
}

// TemporalWorkerProcessList contains a list of TemporalWorkerProcess.
#TemporalWorkerProcessList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TemporalWorkerProcess] @go(Items,[]TemporalWorkerProcess)
}
