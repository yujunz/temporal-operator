// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/alexandrevilain/temporal-operator/api/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// TemporalNamespaceArchivalSpec is a per-namespace archival configuration override.
#TemporalNamespaceArchivalSpec: {
	// History is the config for this namespace history archival.
	// +optional
	history?: null | #ArchivalSpec @go(History,*ArchivalSpec)

	// Visibility is the config for this namespace visibility archival.
	// +optional
	visibility?: null | #ArchivalSpec @go(Visibility,*ArchivalSpec)
}

// TemporalNamespaceSpec defines the desired state of Namespace.
#TemporalNamespaceSpec: {
	// Reference to the temporal cluster the namespace will be created.
	clusterRef: #TemporalClusterReference @go(ClusterRef)

	// Namespace description.
	// +optional
	description?: string @go(Description)

	// Namespace owner email.
	// +optional
	ownerEmail?: string @go(OwnerEmail)

	// RetentionPeriod to apply on closed workflow executions.
	retentionPeriod?: null | metav1.#Duration @go(RetentionPeriod,*metav1.Duration)

	// Data is a key-value map for any customized purpose.
	// +optional
	data?: {[string]: string} @go(Data,map[string]string)

	// +optional
	securityToken?: string @go(SecurityToken)

	// IsGlobalNamespace defines whether the namespace is a global namespace.
	// +optional
	isGlobalNamespace?: bool @go(IsGlobalNamespace)

	// List of clusters names to which the namespace can fail over.
	// Only applicable if the namespace is a global namespace.
	// +optional
	clusters?: [...string] @go(Clusters,[]string)

	// The name of active Temporal Cluster.
	// Only applicable if the namespace is a global namespace.
	// +optional
	activeClusterName?: string @go(ActiveClusterName)

	// AllowDeletion makes the controller delete the Temporal namespace if the
	// CRD is deleted.
	// +optional
	allowDeletion?: bool @go(AllowDeletion)

	// Archival is a per-namespace archival configuration.
	// If not set, the default cluster configuration is used.
	// +optional
	archival?: null | #TemporalNamespaceArchivalSpec @go(Archival,*TemporalNamespaceArchivalSpec)
}

// TemporalNamespaceStatus defines the observed state of Namespace.
#TemporalNamespaceStatus: {
	// Conditions represent the latest available observations of the Namespace state.
	conditions: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)
}

// A TemporalNamespace creates a namespace in the targeted temporal cluster.
#TemporalNamespace: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta       @go(ObjectMeta)
	spec?:     #TemporalNamespaceSpec   @go(Spec)
	status?:   #TemporalNamespaceStatus @go(Status)
}

// TemporalNamespaceList contains a list of Namespace.
#TemporalNamespaceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TemporalNamespace] @go(Items,[]TemporalNamespace)
}
