{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Temporal Operator is the Kubernetes Operator to deploy and manage Temporal clusters.</p>"},{"location":"#use-kubernetes-custom-resources","title":"Use Kubernetes custom resources","text":"<p>Using the Temporal Operator you can easily deploy a production-ready temporal cluster and manage temporal namespaces using native Kubernetes resources.</p>"},{"location":"#simplified-temporal-cluster-upgrades","title":"Simplified temporal cluster upgrades","text":"<p>Define your initial desired temporal version, the operator deploys it. Update the desired version, the operator upgrade the cluster for you. Without any manual or scripted action.</p>"},{"location":"#choose-the-database-you-want","title":"Choose the database you want","text":"<p>The Temporal Operator supports all databases temporal supports.  Deploy Cassandra, PostgreSQL or MySQL the way you want, the operator takes cares of temporal schema database for you.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>First install cert-manager on your cluster. The operator comes with admissions webhooks that requires self-signed certificates.</p> <p><pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml\n</code></pre> (You can use the installation method you want, see the cert-manager's documentation). Note that you can use your own certificates if you don't want cert-manager on your cluster.</p> <p>Then install Temporal Operator's CRDs on your cluster:</p> <pre><code>kubectl apply --server-side -f https://github.com/alexandrevilain/temporal-operator/releases/latest/download/temporal-operator.crds.yaml\n</code></pre> <p>Then install the operator on your cluster:</p> <pre><code>kubectl apply -f https://github.com/alexandrevilain/temporal-operator/releases/latest/download/temporal-operator.yaml\n</code></pre> <p>Then create the namespace \"demo\" and create a sample postgresql server:</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/alexandrevilain/temporal-operator/main/examples/cluster-postgres/00-namespace.yaml\nkubectl apply -f https://raw.githubusercontent.com/alexandrevilain/temporal-operator/main/examples/cluster-postgres/01-postgresql.yaml\n</code></pre> <p>Finish by creating your first temporal cluster: <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  persistence:\n    defaultStore:\n      sql:\n        user: temporal\n        pluginName: postgres\n        databaseName: temporal\n        connectAddr: postgres.demo.svc.cluster.local:5432\n        connectProtocol: tcp\n      passwordSecretRef:\n        name: postgres-password\n        key: PASSWORD\n    visibilityStore:\n      sql:\n        user: temporal\n        pluginName: postgres\n        databaseName: temporal_visibility\n        connectAddr: postgres.demo.svc.cluster.local:5432\n        connectProtocol: tcp\n      passwordSecretRef:\n        name: postgres-password\n        key: PASSWORD\n</code></pre></p> <p>Apply this file to the cluster.</p> <p>To try more features the operator provides feel free to navigate in the documentation website or checkout the examples/ directory.</p>"},{"location":"api/v1beta1/","title":"v1beta1","text":"API reference <p>Package v1beta1 contains API Schema definitions for the v1beta1 API group</p> <p>Resource Types:</p> <ul><li> TemporalCluster </li><li> TemporalWorkerProcess </li></ul>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalCluster","title":"TemporalCluster","text":"<p>TemporalCluster defines a temporal cluster deployment.</p> Field Description <code>apiVersion</code> string <code>temporal.io/v1beta1</code> <code>kind</code> string  <code>TemporalCluster</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  TemporalClusterSpec  <p>Specification of the desired behavior of the Temporal cluster.</p> <code>image</code>  string  (Optional) <p>Image defines the temporal server docker image the cluster should use for each services.</p> <code>version</code>  github.com/alexandrevilain/temporal-operator/pkg/version.Version  (Optional) <p>Version defines the temporal version the cluster to be deployed. This version impacts the underlying persistence schemas versions.</p> <code>log</code>  LogSpec  (Optional) <p>Log defines temporal cluster\u2019s logger configuration.</p> <code>jobTtlSecondsAfterFinished</code>  int32  (Optional) <p>JobTTLSecondsAfterFinished is amount of time to keep job pods after jobs are completed. Defaults to 300 seconds.</p> <code>jobResources</code>  Kubernetes core/v1.ResourceRequirements  (Optional) <p>JobResources allows set resources for setup/update jobs.</p> <code>numHistoryShards</code>  int32  <p>NumHistoryShards is the desired number of history shards. This field is immutable.</p> <code>services</code>  ServicesSpec  (Optional) <p>Services allows customizations for each temporal services deployment.</p> <code>persistence</code>  TemporalPersistenceSpec  <p>Persistence defines temporal persistence configuration.</p> <code>imagePullSecrets</code>  []Kubernetes core/v1.LocalObjectReference  (Optional) <p>An optional list of references to secrets in the same namespace to use for pulling temporal images from registries.</p> <code>ui</code>  TemporalUISpec  (Optional) <p>UI allows configuration of the optional temporal web ui deployed alongside the cluster.</p> <code>admintools</code>  TemporalAdminToolsSpec  (Optional) <p>AdminTools allows configuration of the optional admin tool pod deployed alongside the cluster.</p> <code>mTLS</code>  MTLSSpec  (Optional) <p>MTLS allows configuration of the network traffic encryption for the cluster.</p> <code>metrics</code>  MetricsSpec  (Optional) <p>Metrics allows configuration of scraping endpoints for stats. prometheus or m3.</p> <code>dynamicConfig</code>  DynamicConfigSpec  (Optional) <p>DynamicConfig allows advanced configuration for the temporal cluster.</p> <code>archival</code>  ClusterArchivalSpec  (Optional) <p>Archival allows Workflow Execution Event Histories and Visibility data backups for the temporal cluster.</p> <code>authorization</code>  AuthorizationSpec  (Optional) <p>Authorization allows authorization configuration for the temporal cluster.</p> <code>status</code>  TemporalClusterStatus  <p>Most recent observed status of the Temporal cluster.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalWorkerProcess","title":"TemporalWorkerProcess","text":"<p>TemporalWorkerProcess is the Schema for the temporalworkerprocesses API.</p> Field Description <code>apiVersion</code> string <code>temporal.io/v1beta1</code> <code>kind</code> string  <code>TemporalWorkerProcess</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  TemporalWorkerProcessSpec  <code>clusterRef</code>  TemporalClusterReference  <p>Reference to the temporal cluster the worker will connect to.</p> <code>version</code>  string  (Optional) <p>Version defines the worker process version.</p> <code>image</code>  string  <p>Image defines the temporal worker docker image the instance should run.</p> <code>jobTtlSecondsAfterFinished</code>  int32  (Optional) <p>JobTTLSecondsAfterFinished is amount of time to keep job pods after jobs are completed. Defaults to 300 seconds.</p> <code>replicas</code>  int32  (Optional) <p>Number of desired replicas. Default to 1.</p> <code>pullPolicy</code>  Kubernetes core/v1.PullPolicy  <p>Image pull policy for determining how to pull worker process images.</p> <code>imagePullSecrets</code>  []Kubernetes core/v1.LocalObjectReference  (Optional) <p>An optional list of references to secrets in the same namespace to use for pulling temporal images from registries.</p> <code>temporalNamespace</code>  string  <p>TemporalNamespace that worker will poll.</p> <code>builder</code>  TemporalWorkerProcessBuilder  <p>Builder is the configuration for building a TemporalWorkerProcess. THIS FEATURE IS HIGHLY EXPERIMENTAL.</p> <code>status</code>  TemporalWorkerProcessStatus"},{"location":"api/v1beta1/#temporal.io/v1beta1.ArchivalProvider","title":"ArchivalProvider","text":"<p> (Appears on: ClusterArchivalSpec) </p> <p>ArchivalProvider contains the config for archivers.</p> Field Description <code>filestore</code>  FilestoreArchiver  (Optional) <code>s3</code>  S3Archiver  (Optional) <code>gcs</code>  GCSArchiver  (Optional)"},{"location":"api/v1beta1/#temporal.io/v1beta1.ArchivalProviderKind","title":"ArchivalProviderKind (<code>string</code> alias)","text":""},{"location":"api/v1beta1/#temporal.io/v1beta1.ArchivalSpec","title":"ArchivalSpec","text":"<p> (Appears on: ClusterArchivalSpec,  TemporalNamespaceArchivalSpec) </p> <p>ArchivalSpec is the archival configuration for a particular persistence type (history or visibilitty).</p> Field Description <code>enabled</code>  bool  (Optional) <p>Enabled defines if the archival is enabled by default for all namespaces or for a particular namespace (depends if it\u2019s for a TemporalCluster or a TemporalNamespace).</p> <code>paused</code>  bool  <p>Paused defines if the archival is paused.</p> <code>enableRead</code>  bool  <p>EnableRead allows temporal to read from the archived Event History.</p> <code>path</code>  string  <p>Path is \u2026</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.AuthorizationSpec","title":"AuthorizationSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>AuthorizationSpec defines the specifications for authorization in the temporal cluster. It contains fields that configure how JWT tokens are validated, how permissions are managed, and how claims are mapped.</p> Field Description <code>jwtKeyProvider</code>  AuthorizationSpecJWTKeyProvider  (Optional) <p>JWTKeyProvider specifies the signing key provider used for validating JWT tokens.</p> <code>permissionsClaimName</code>  string  (Optional) <p>PermissionsClaimName is the name of the claim within the JWT token that contains the user\u2019s permissions.</p> <code>authorizer</code>  string  (Optional) <p>Authorizer defines the authorization mechanism to be used. It can be left as an empty string to use a no-operation authorizer (noopAuthorizer), or set to \u201cdefault\u201d to use the temporal\u2019s default authorizer (defaultAuthorizer).</p> <code>claimMapper</code>  string  (Optional) <p>ClaimMapper specifies the claim mapping mechanism used for handling JWT claims. Similar to the Authorizer, it can be left as an empty string to use a no-operation claim mapper (noopClaimMapper), or set to \u201cdefault\u201d to use the default JWT claim mapper (defaultJWTClaimMapper).</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.AuthorizationSpecJWTKeyProvider","title":"AuthorizationSpecJWTKeyProvider","text":"<p> (Appears on: AuthorizationSpec) </p> <p>AuthorizationSpecJWTKeyProvider defines the configuration for a JWT key provider within the AuthorizationSpec. It specifies where to source the JWT keys from and how often they should be refreshed.</p> Field Description <code>keySourceURIs</code>  []string  (Optional) <p>KeySourceURIs is a list of URIs where the JWT signing keys can be obtained. These URIs are used by the authorization system to fetch the public keys necessary for validating JWT tokens.</p> <code>refreshInterval</code>  Kubernetes meta/v1.Duration  (Optional) <p>RefreshInterval defines the time interval at which temporal should refresh the JWT signing keys from the specified URIs.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.CassandraConsistencySpec","title":"CassandraConsistencySpec","text":"<p> (Appears on: CassandraSpec) </p> <p>CassandraConsistencySpec sets the consistency level for regular &amp; serial queries to Cassandra.</p> Field Description <code>consistency</code>  github.com/gocql/gocql.Consistency  (Optional) <p>Consistency sets the default consistency level. Values identical to gocql Consistency values. (defaults to LOCAL_QUORUM if not set).</p> <code>serialConsistency</code>  github.com/gocql/gocql.SerialConsistency  (Optional) <p>SerialConsistency sets the consistency for the serial prtion of queries. Values identical to gocql SerialConsistency values. (defaults to LOCAL_SERIAL if not set)</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.CassandraSpec","title":"CassandraSpec","text":"<p> (Appears on: DatastoreSpec) </p> <p>CassandraSpec contains cassandra datastore connections specifications.</p> Field Description <code>hosts</code>  []string  <p>Hosts is a list of cassandra endpoints.</p> <code>port</code>  int  <p>Port is the cassandra port used for connection by gocql client.</p> <code>user</code>  string  <p>User is the cassandra user used for authentication by gocql client.</p> <code>keyspace</code>  string  <p>Keyspace is the cassandra keyspace.</p> <code>datacenter</code>  string  (Optional) <p>Datacenter is the data center filter arg for cassandra.</p> <code>maxConns</code>  int  (Optional) <p>MaxConns is the max number of connections to this datastore for a single keyspace.</p> <code>connectTimeout</code>  Kubernetes meta/v1.Duration  (Optional) <p>ConnectTimeout is a timeout for initial dial to cassandra server.</p> <code>consistency</code>  CassandraConsistencySpec  (Optional) <p>Consistency configuration.</p> <code>disableInitialHostLookup</code>  bool  (Optional) <p>DisableInitialHostLookup instructs the gocql client to connect only using the supplied hosts.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.CertificatesDurationSpec","title":"CertificatesDurationSpec","text":"<p> (Appears on: MTLSSpec) </p> <p>CertificatesDurationSpec defines parameters for the temporal mTLS certificates duration.</p> Field Description <code>rootCACertificate</code>  Kubernetes meta/v1.Duration  (Optional) <p>RootCACertificate is the \u2018duration\u2019 (i.e. lifetime) of the Root CA Certificate. It defaults to 10 years.</p> <code>intermediateCAsCertificates</code>  Kubernetes meta/v1.Duration  (Optional) <p>IntermediateCACertificates is the \u2018duration\u2019 (i.e. lifetime) of the intermediate CAs Certificates. It defaults to 5 years.</p> <code>clientCertificates</code>  Kubernetes meta/v1.Duration  (Optional) <p>ClientCertificates is the \u2018duration\u2019 (i.e. lifetime) of the client certificates. It defaults to 1 year.</p> <code>frontendCertificate</code>  Kubernetes meta/v1.Duration  (Optional) <p>FrontendCertificate is the \u2018duration\u2019 (i.e. lifetime) of the frontend certificate. It defaults to 1 year.</p> <code>internodeCertificate</code>  Kubernetes meta/v1.Duration  (Optional) <p>InternodeCertificate is the \u2018duration\u2019 (i.e. lifetime) of the internode certificate. It defaults to 1 year.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ClusterArchivalSpec","title":"ClusterArchivalSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>ClusterArchivalSpec is the configuration for cluster-wide archival config.</p> Field Description <code>enabled</code>  bool  (Optional) <p>Enabled defines if the archival is enabled for the cluster.</p> <code>provider</code>  ArchivalProvider  (Optional) <p>Provider defines the archival provider for the cluster. The same provider is used for both history and visibility, but some config can be changed using spec.archival.[history|visibility].config.</p> <code>history</code>  ArchivalSpec  (Optional) <p>History is the default config for the history archival.</p> <code>visibility</code>  ArchivalSpec  (Optional) <p>Visibility is the default config for visibility archival.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ConstrainedValue","title":"ConstrainedValue","text":"<p> (Appears on: DynamicConfigSpec) </p> <p>ConstrainedValue is an alias for temporal\u2019s dynamicconfig.ConstrainedValue.</p> Field Description <code>constraints</code>  Constraints  (Optional) <p>Constraints describe under what conditions a ConstrainedValue should be used.</p> <code>value</code>  k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1.JSON  <p>Value is the value for the configuration key. The type of the Value field depends on the key. Acceptable types will be one of: int, float64, bool, string, map[string]any, time.Duration</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.Constraints","title":"Constraints","text":"<p> (Appears on: ConstrainedValue) </p> <p>Constraints is an alias for temporal\u2019s dynamicconfig.Constraints. It describes under what conditions a ConstrainedValue should be used.</p> Field Description <code>namespace</code>  string  (Optional) <code>namespaceId</code>  string  (Optional) <code>taskQueueName</code>  string  (Optional) <code>taskQueueType</code>  string  (Optional) <code>shardId</code>  int32  (Optional) <code>taskType</code>  string  (Optional)"},{"location":"api/v1beta1/#temporal.io/v1beta1.ContainerRegistryConfig","title":"ContainerRegistryConfig","text":"<p> (Appears on: TemporalWorkerProcessBuilder) </p> <p>ContainerRegistryConfig specifies the parameters to connect with desired container repository.</p> Field Description <code>repository</code>  string  <p>Repository is the fqdn to the image repo.</p> <code>username</code>  string  <p>Username is the username for the container repo.</p> <code>passwordSecretRef</code>  SecretKeyReference  <p>PasswordSecret is the reference to the secret holding the docker repo password.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.DatastoreSpec","title":"DatastoreSpec","text":"<p> (Appears on: TemporalPersistenceSpec) </p> <p>DatastoreSpec contains temporal datastore specifications.</p> Field Description <code>name</code>  string  (Optional) <p>Name is the name of the datastore. It should be unique and will be referenced within the persitence spec. Defaults to \u201cdefault\u201d for default sore, \u201cvisibility\u201d for visibility store, \u201csecondaryVisibility\u201d for secondary visibility store and \u201cadvancedVisibility\u201d for advanced visibility store.</p> <code>sql</code>  SQLSpec  (Optional) <p>SQL holds all connection parameters for SQL datastores.</p> <code>elasticsearch</code>  ElasticsearchSpec  (Optional) <p>Elasticsearch holds all connection parameters for Elasticsearch datastores.</p> <code>cassandra</code>  CassandraSpec  (Optional) <p>Cassandra holds all connection parameters for Cassandra datastore. Note that cassandra is now deprecated for visibility store.</p> <code>passwordSecretRef</code>  SecretKeyReference  <p>PasswordSecret is the reference to the secret holding the password.</p> <code>tls</code>  DatastoreTLSSpec  (Optional) <p>TLS is an optional option to connect to the datastore using TLS.</p> <code>skipCreate</code>  bool  (Optional) <p>SkipCreate instructs the operator to skip creating the database for SQL datastores or to skip creating keyspace for Cassandra. Use this option if your database or keyspace has already been provisioned by an administrator.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.DatastoreStatus","title":"DatastoreStatus","text":"<p> (Appears on: TemporalPersistenceStatus) </p> <p>DatastoreStatus contains the current status of a datastore.</p> Field Description <code>created</code>  bool  <p>Created indicates if the database or keyspace has been created.</p> <code>setup</code>  bool  <p>Setup indicates if tables have been set up.</p> <code>type</code>  DatastoreType  (Optional) <p>Type indicates the datastore stype.</p> <code>schemaVersion</code>  github.com/alexandrevilain/temporal-operator/pkg/version.Version  (Optional) <p>SchemaVersion report the current schema version.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.DatastoreTLSSpec","title":"DatastoreTLSSpec","text":"<p> (Appears on: DatastoreSpec) </p> <p>DatastoreTLSSpec contains datastore TLS connections specifications.</p> Field Description <code>enabled</code>  bool  <p>Enabled defines if the cluster should use a TLS connection to connect to the datastore.</p> <code>certFileRef</code>  SecretKeyReference  (Optional) <p>CertFileRef is a reference to a secret containing the cert file.</p> <code>keyFileRef</code>  SecretKeyReference  (Optional) <p>KeyFileRef is a reference to a secret containing the key file.</p> <code>caFileRef</code>  SecretKeyReference  (Optional) <p>CaFileRef is a reference to a secret containing the ca file.</p> <code>enableHostVerification</code>  bool  <p>EnableHostVerification defines if the hostname should be verified when connecting to the datastore.</p> <code>serverName</code>  string  (Optional) <p>ServerName the datastore should present.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.DatastoreType","title":"DatastoreType (<code>string</code> alias)","text":"<p> (Appears on: DatastoreStatus) </p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.DeploymentOverride","title":"DeploymentOverride","text":"<p> (Appears on: ServiceSpecOverride) </p> <p>DeploymentOverride provides the ability to override a Deployment.</p> Field Description <code>metadata</code>  ObjectMetaOverride  <code>spec</code>  DeploymentOverrideSpec  (Optional) <p>Specification of the desired behavior of the Deployment.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.DeploymentOverrideSpec","title":"DeploymentOverrideSpec","text":"<p> (Appears on: DeploymentOverride) </p> <p>DeploymentOverrideSpec provides the ability to override a Deployment Spec. It\u2019s a subset of fields included in k8s.io/api/apps/v1.DeploymentSpec.</p> Field Description <code>template</code>  PodTemplateSpecOverride  (Optional) <p>Template describes the pods that will be created.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.DynamicConfigSpec","title":"DynamicConfigSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>DynamicConfigSpec is the configuration for temporal dynamic config.</p> Field Description <code>pollInterval</code>  Kubernetes meta/v1.Duration  (Optional) <p>PollInterval defines how often the config should be updated by checking provided values. Defaults to 10s.</p> <code>values</code>  map[string][]./api/v1beta1.ConstrainedValue  <p>Values contains all dynamic config keys and their constained values.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ElasticsearchIndices","title":"ElasticsearchIndices","text":"<p> (Appears on: ElasticsearchSpec) </p> <p>ElasticsearchIndices holds index names.</p> Field Description <code>visibility</code>  string  <p>Visibility defines visibility\u2019s index name.</p> <code>secondaryVisibility</code>  string  (Optional) <p>SecondaryVisibility defines secondary visibility\u2019s index name.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ElasticsearchSpec","title":"ElasticsearchSpec","text":"<p> (Appears on: DatastoreSpec) </p> <p>ElasticsearchSpec contains Elasticsearch datastore connections specifications.</p> Field Description <code>version</code>  string  <p>Version defines the elasticsearch version.</p> <code>url</code>  string  <p>URL is the connection url to connect to the instance.</p> <code>username</code>  string  <p>Username is the username to be used for the connection.</p> <code>indices</code>  ElasticsearchIndices  <p>Indices holds visibility index names.</p> <code>logLevel</code>  string  (Optional) <p>LogLevel defines the temporal cluster\u2019s es client logger level.</p> <code>closeIdleConnectionsInterval</code>  Kubernetes meta/v1.Duration  (Optional) <p>CloseIdleConnectionsInterval is the max duration a connection stay open while idle.</p> <code>enableSniff</code>  bool  (Optional) <p>EnableSniff enables or disables sniffer on the temporal cluster\u2019s es client.</p> <code>enableHealthcheck</code>  bool  (Optional) <p>EnableHealthcheck enables or disables healthcheck on the temporal cluster\u2019s es client.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.FilestoreArchiver","title":"FilestoreArchiver","text":"<p> (Appears on: ArchivalProvider) </p> <p>FilestoreArchiver is the file store archival provider configuration.</p> Field Description <code>filePermissions</code>  string  <p>FilePermissions sets the file permissions of the archived files. It\u2019s recommend to leave it empty and use the default value of \u201c0666\u201d to avoid read/write issues.</p> <code>dirPermissions</code>  string  <p>DirPermissions sets the directory permissions of the archive directory. It\u2019s recommend to leave it empty and use the default value of \u201c0766\u201d to avoid read/write issues.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.FrontendMTLSSpec","title":"FrontendMTLSSpec","text":"<p> (Appears on: MTLSSpec) </p> <p>FrontendMTLSSpec defines parameters for the temporal encryption in transit with mTLS.</p> Field Description <code>enabled</code>  bool  (Optional) <p>Enabled defines if the operator should enable mTLS for cluster\u2019s public endpoints.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.GCSArchiver","title":"GCSArchiver","text":"<p> (Appears on: ArchivalProvider) </p> <p>GCSArchiver is the GCS archival provider configuration.</p> Field Description <code>credentialsRef</code>  Kubernetes core/v1.SecretKeySelector  <p>SecretAccessKeyRef is the secret key selector containing Google Cloud Storage credentials file.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.GitRepositoryRef","title":"GitRepositoryRef","text":"<p> (Appears on: GitRepositorySpec) </p> <p>GitRepositoryRef specifies the Git reference to resolve and checkout.</p> Field Description <code>branch</code>  string  (Optional) <p>Branch to check out, defaults to \u2018main\u2019 if no other field is defined.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.GitRepositorySpec","title":"GitRepositorySpec","text":"<p> (Appears on: TemporalWorkerProcessBuilder) </p> <p>GitRepositorySpec specifies the required configuration to produce an Artifact for a Git repository.</p> Field Description <code>url</code>  string  <p>URL specifies the Git repository URL, it can be an HTTP/S or SSH address.</p> <code>reference</code>  GitRepositoryRef  (Optional) <p>Reference specifies the Git reference to resolve and monitor for changes, defaults to the \u2018master\u2019 branch.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.InternalFrontendServiceSpec","title":"InternalFrontendServiceSpec","text":"<p> (Appears on: ServicesSpec) </p> <p>InternalFrontendServiceSpec contains temporal internal frontend service specifications.</p> Field Description <code>ServiceSpec</code>  ServiceSpec  <p> (Members of <code>ServiceSpec</code> are embedded into this type.) </p> <code>enabled</code>  bool  (Optional) <p>Enabled defines if we want to spawn the internal frontend service.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.InternodeMTLSSpec","title":"InternodeMTLSSpec","text":"<p> (Appears on: MTLSSpec) </p> <p>InternodeMTLSSpec defines parameters for the temporal encryption in transit with mTLS.</p> Field Description <code>enabled</code>  bool  (Optional) <p>Enabled defines if the operator should enable mTLS for network between cluster nodes.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.LogSpec","title":"LogSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>LogSpec contains the temporal logging configuration.</p> Field Description <code>stdout</code>  bool  (Optional) <p>Stdout is true if the output needs to goto standard out; default is stderr.</p> <code>level</code>  string  (Optional) <p>Level is the desired log level; see colocated zap_logger.go::parseZapLevel()</p> <code>outputFile</code>  string  (Optional) <p>OutputFile is the path to the log output file.</p> <code>format</code>  string  (Optional) <p>Format determines the format of each log file printed to the output. Use \u201cconsole\u201d if you want stack traces to appear on multiple lines.</p> <code>development</code>  bool  (Optional) <p>Development determines whether the logger is run in Development (== Test) or in Production mode.  Default is Production.  Production-stage disables panics from DPanic logging.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.MTLSProvider","title":"MTLSProvider (<code>string</code> alias)","text":"<p> (Appears on: MTLSSpec) </p> <p>MTLSProvider is the enum for support mTLS provider.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.MTLSSpec","title":"MTLSSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>MTLSSpec defines parameters for the temporal encryption in transit with mTLS.</p> Field Description <code>provider</code>  MTLSProvider  (Optional) <p>Provider defines the tool used to manage mTLS certificates.</p> <code>internode</code>  InternodeMTLSSpec  (Optional) <p>Internode allows configuration of the internode traffic encryption. Useless if mTLS provider is not cert-manager.</p> <code>frontend</code>  FrontendMTLSSpec  (Optional) <p>Frontend allows configuration of the frontend\u2019s public endpoint traffic encryption. Useless if mTLS provider is not cert-manager.</p> <code>certificatesDuration</code>  CertificatesDurationSpec  (Optional) <p>CertificatesDuration allows configuration of maximum certificates lifetime. Useless if mTLS provider is not cert-manager.</p> <code>refreshInterval</code>  Kubernetes meta/v1.Duration  (Optional) <p>RefreshInterval defines interval between refreshes of certificates in the cluster components. Defaults to 1 hour. Useless if mTLS provider is not cert-manager.</p> <code>renewBefore</code>  Kubernetes meta/v1.Duration  (Optional) <p>RenewBefore is defines how long before the currently issued certificate\u2019s expiry cert-manager should renew the certificate. The default is <sup>2</sup>\u2044<sub>3</sub> of the issued certificate\u2019s duration. Minimum accepted value is 5 minutes. Useless if mTLS provider is not cert-manager.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.MetricsSpec","title":"MetricsSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>MetricsSpec determines parameters for configuring metrics endpoints.</p> Field Description <code>enabled</code>  bool  <p>Enabled defines if the operator should enable metrics exposition on temporal components.</p> <code>prometheus</code>  PrometheusSpec  (Optional) <p>Prometheus reporter configuration.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ObjectMetaOverride","title":"ObjectMetaOverride","text":"<p> (Appears on: DeploymentOverride,  PodTemplateSpecOverride,  TemporalUISpec) </p> <p>ObjectMetaOverride provides the ability to override an object metadata. It\u2019s a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.</p> Field Description <code>labels</code>  map[string]string  (Optional) <p>Map of string keys and values that can be used to organize and categorize (scope and select) objects.</p> <code>annotations</code>  map[string]string  (Optional) <p>Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.PodTemplateSpecOverride","title":"PodTemplateSpecOverride","text":"<p> (Appears on: DeploymentOverrideSpec) </p> <p>PodTemplateSpecOverride provides the ability to override a pod template spec. It\u2019s a subset of the fields included in k8s.io/api/core/v1.PodTemplateSpec.</p> Field Description <code>metadata</code>  ObjectMetaOverride  <code>spec</code>  Kubernetes core/v1.PodSpec  (Optional) <p>Specification of the desired behavior of the pod.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.PrometheusScrapeConfig","title":"PrometheusScrapeConfig","text":"<p> (Appears on: PrometheusSpec) </p> <p>PrometheusScrapeConfig is the configuration for making prometheus scrape components metrics.</p> Field Description <code>annotations</code>  bool  (Optional) <p>Annotations defines if the operator should add prometheus scrape annotations to the services pods.</p> <code>serviceMonitor</code>  PrometheusScrapeConfigServiceMonitor  (Optional)"},{"location":"api/v1beta1/#temporal.io/v1beta1.PrometheusScrapeConfigServiceMonitor","title":"PrometheusScrapeConfigServiceMonitor","text":"<p> (Appears on: PrometheusScrapeConfig) </p> <p>PrometheusScrapeConfigServiceMonitor is the configuration for prometheus operator ServiceMonitor.</p> Field Description <code>enabled</code>  bool  (Optional) <p>Enabled defines if the operator should create a ServiceMonitor for each services.</p> <code>labels</code>  map[string]string  (Optional) <p>Labels adds extra labels to the ServiceMonitor.</p> <code>override</code>  github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1.ServiceMonitorSpec  (Optional) <p>Override allows customization of the created ServiceMonitor. All fields can be overritten except \u201cendpoints\u201d, \u201cselector\u201d and \u201cnamespaceSelector\u201d.</p> <code>metricRelabelings</code>  []github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1.RelabelConfig  (Optional) <p>MetricRelabelConfigs to apply to samples before ingestion.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.PrometheusSpec","title":"PrometheusSpec","text":"<p> (Appears on: MetricsSpec) </p> <p>PrometheusSpec is the configuration for prometheus reporter.</p> Field Description <code>listenAddress</code>  string  (Optional) <p>Deprecated. Address for prometheus to serve metrics from.</p> <code>listenPort</code>  int32  (Optional) <p>ListenPort for prometheus to serve metrics from.</p> <code>scrapeConfig</code>  PrometheusScrapeConfig  (Optional) <p>ScrapeConfig is the prometheus scrape configuration.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.S3Archiver","title":"S3Archiver","text":"<p> (Appears on: ArchivalProvider) </p> <p>S3Archiver is the S3 archival provider configuration.</p> Field Description <code>region</code>  string  <p>Region is the aws s3 region.</p> <code>endpoint</code>  string  (Optional) <p>Use Endpoint if you want to use s3-compatible object storage.</p> <code>roleName</code>  string  (Optional) <p>Use RoleName if you want the temporal service account to assume an AWS Identity and Access Management (IAM) role.</p> <code>credentials</code>  S3Credentials  (Optional) <p>Use credentials if you want to use aws credentials from secret.</p> <code>s3ForcePathStyle</code>  bool  (Optional) <p>Use s3ForcePathStyle if you want to use s3 path style.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.S3Credentials","title":"S3Credentials","text":"<p> (Appears on: S3Archiver) </p> Field Description <code>accessKeyIdRef</code>  Kubernetes core/v1.SecretKeySelector  <p>AccessKeyIDRef is the secret key selector containing AWS access key ID.</p> <code>secretKeyRef</code>  Kubernetes core/v1.SecretKeySelector  <p>SecretAccessKeyRef is the secret key selector containing AWS secret access key.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.SQLSpec","title":"SQLSpec","text":"<p> (Appears on: DatastoreSpec) </p> <p>SQLSpec contains SQL datastore connections specifications.</p> Field Description <code>user</code>  string  <p>User is the username to be used for the connection.</p> <code>pluginName</code>  string  <p>PluginName is the name of SQL plugin.</p> <code>databaseName</code>  string  <p>DatabaseName is the name of SQL database to connect to.</p> <code>connectAddr</code>  string  <p>ConnectAddr is the remote addr of the database.</p> <code>connectProtocol</code>  string  (Optional) <p>ConnectProtocol is the protocol that goes with the ConnectAddr.</p> <code>connectAttributes</code>  map[string]string  (Optional) <p>ConnectAttributes is a set of key-value attributes to be sent as part of connect data_source_name url</p> <code>maxConns</code>  int  (Optional) <p>MaxConns the max number of connections to this datastore.</p> <code>maxIdleConns</code>  int  (Optional) <p>MaxIdleConns is the max number of idle connections to this datastore.</p> <code>maxConnLifetime</code>  Kubernetes meta/v1.Duration  (Optional) <p>MaxConnLifetime is the maximum time a connection can be alive</p> <code>taskScanPartitions</code>  int  (Optional) <p>TaskScanPartitions is the number of partitions to sequentially scan during ListTaskQueue operations.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.SecretKeyReference","title":"SecretKeyReference","text":"<p> (Appears on: ContainerRegistryConfig,  DatastoreSpec,  DatastoreTLSSpec) </p> <p>SecretKeyReference contains enough information to locate the referenced Kubernetes Secret object in the same namespace.</p> Field Description <code>name</code>  string  <p>Name of the Secret.</p> <code>key</code>  string  (Optional) <p>Key in the Secret.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ServiceSpec","title":"ServiceSpec","text":"<p> (Appears on: InternalFrontendServiceSpec,  ServicesSpec) </p> <p>ServiceSpec contains a temporal service specifications.</p> Field Description <code>port</code>  int  (Optional) <p>Port defines a custom gRPC port for the service. Default values are: 7233 for Frontend service 7234 for History service 7235 for Matching service 7239 for Worker service</p> <code>membershipPort</code>  int  (Optional) <p>MembershipPort defines a custom membership port for the service. Default values are: 6933 for Frontend service 6934 for History service 6935 for Matching service 6939 for Worker service</p> <code>httpPort</code>  int  (Optional) <p>HTTPPort defines a custom http port for the service. Default values are: 7243 for Frontend service</p> <code>replicas</code>  int32  (Optional) <p>Number of desired replicas for the service. Default to 1.</p> <code>resources</code>  Kubernetes core/v1.ResourceRequirements  (Optional) <p>Compute Resources required by this service. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</p> <code>overrides</code>  ServiceSpecOverride  (Optional) <p>Overrides adds some overrides to the resources deployed for the service. Those overrides takes precedence over spec.services.overrides.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ServiceSpecOverride","title":"ServiceSpecOverride","text":"<p> (Appears on: ServiceSpec,  ServicesSpec,  TemporalAdminToolsSpec,  TemporalUISpec) </p> <p>ServiceSpecOverride provides the ability to override the generated manifests of a temporal service.</p> Field Description <code>deployment</code>  DeploymentOverride  <p>Override configuration for the temporal service Deployment.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ServiceStatus","title":"ServiceStatus","text":"<p> (Appears on: TemporalClusterStatus) </p> <p>ServiceStatus reports a service status.</p> Field Description <code>name</code>  string  <p>Name of the temporal service.</p> <code>version</code>  string  <p>Current observed version of the service.</p> <code>ready</code>  bool  <p>Ready defines if the service is ready.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.ServicesSpec","title":"ServicesSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>ServicesSpec contains all temporal services specifications.</p> Field Description <code>frontend</code>  ServiceSpec  (Optional) <p>Frontend service custom specifications.</p> <code>internalFrontend</code>  InternalFrontendServiceSpec  (Optional) <p>Internal Frontend service custom specifications. Only compatible with temporal &gt;= 1.20.0</p> <code>history</code>  ServiceSpec  (Optional) <p>History service custom specifications.</p> <code>matching</code>  ServiceSpec  (Optional) <p>Matching service custom specifications.</p> <code>worker</code>  ServiceSpec  (Optional) <p>Worker service custom specifications.</p> <code>overrides</code>  ServiceSpecOverride  (Optional) <p>Overrides adds some overrides to the resources deployed for all temporal services services. Those overrides can be customized per service using spec.services..overrides."},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalAdminToolsSpec","title":"TemporalAdminToolsSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>TemporalAdminToolsSpec defines parameters for the temporal admin tools within a Temporal cluster deployment. Note that deployed admin tools version is the same as the cluster\u2019s version.</p> Field Description <code>enabled</code>  bool  (Optional) <p>Enabled defines if the operator should deploy the admin tools alongside the cluster.</p> <code>image</code>  string  (Optional) <p>Image defines the temporal admin tools docker image the instance should run.</p> <code>resources</code>  Kubernetes core/v1.ResourceRequirements  (Optional) <p>Compute Resources required by the ui. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</p> <code>overrides</code>  ServiceSpecOverride  (Optional) <p>Overrides adds some overrides to the resources deployed for the ui.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalClusterClient","title":"TemporalClusterClient","text":"<p>A TemporalClusterClient creates a new mTLS client in the targeted temporal cluster.</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  TemporalClusterClientSpec  <code>clusterRef</code>  TemporalClusterReference  <p>Reference to the temporal cluster the client will get access to.</p> <code>status</code>  TemporalClusterClientStatus"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalClusterClientSpec","title":"TemporalClusterClientSpec","text":"<p> (Appears on: TemporalClusterClient) </p> <p>TemporalClusterClientSpec defines the desired state of ClusterClient.</p> Field Description <code>clusterRef</code>  TemporalClusterReference  <p>Reference to the temporal cluster the client will get access to.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalClusterClientStatus","title":"TemporalClusterClientStatus","text":"<p> (Appears on: TemporalClusterClient) </p> <p>TemporalClusterClientStatus defines the observed state of ClusterClient.</p> Field Description <code>serverName</code>  string  <p>ServerName is the hostname returned by the certificate.</p> <code>secretRef</code>  Kubernetes core/v1.LocalObjectReference  <p>Reference to the Kubernetes Secret containing the certificate for the client.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalClusterReference","title":"TemporalClusterReference","text":"<p> (Appears on: TemporalClusterClientSpec,  TemporalNamespaceSpec,  TemporalWorkerProcessSpec) </p> <p>TemporalClusterReference is a reference to a TemporalCluster.</p> Field Description <code>name</code>  string  <p>The name of the TemporalCluster to reference.</p> <code>namespace</code>  string  <p>The namespace of the TemporalCluster to reference. Defaults to the namespace of the requested resource if omitted.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalClusterSpec","title":"TemporalClusterSpec","text":"<p> (Appears on: TemporalCluster) </p> <p>TemporalClusterSpec defines the desired state of Cluster.</p> Field Description <code>image</code>  string  (Optional) <p>Image defines the temporal server docker image the cluster should use for each services.</p> <code>version</code>  github.com/alexandrevilain/temporal-operator/pkg/version.Version  (Optional) <p>Version defines the temporal version the cluster to be deployed. This version impacts the underlying persistence schemas versions.</p> <code>log</code>  LogSpec  (Optional) <p>Log defines temporal cluster\u2019s logger configuration.</p> <code>jobTtlSecondsAfterFinished</code>  int32  (Optional) <p>JobTTLSecondsAfterFinished is amount of time to keep job pods after jobs are completed. Defaults to 300 seconds.</p> <code>jobResources</code>  Kubernetes core/v1.ResourceRequirements  (Optional) <p>JobResources allows set resources for setup/update jobs.</p> <code>numHistoryShards</code>  int32  <p>NumHistoryShards is the desired number of history shards. This field is immutable.</p> <code>services</code>  ServicesSpec  (Optional) <p>Services allows customizations for each temporal services deployment.</p> <code>persistence</code>  TemporalPersistenceSpec  <p>Persistence defines temporal persistence configuration.</p> <code>imagePullSecrets</code>  []Kubernetes core/v1.LocalObjectReference  (Optional) <p>An optional list of references to secrets in the same namespace to use for pulling temporal images from registries.</p> <code>ui</code>  TemporalUISpec  (Optional) <p>UI allows configuration of the optional temporal web ui deployed alongside the cluster.</p> <code>admintools</code>  TemporalAdminToolsSpec  (Optional) <p>AdminTools allows configuration of the optional admin tool pod deployed alongside the cluster.</p> <code>mTLS</code>  MTLSSpec  (Optional) <p>MTLS allows configuration of the network traffic encryption for the cluster.</p> <code>metrics</code>  MetricsSpec  (Optional) <p>Metrics allows configuration of scraping endpoints for stats. prometheus or m3.</p> <code>dynamicConfig</code>  DynamicConfigSpec  (Optional) <p>DynamicConfig allows advanced configuration for the temporal cluster.</p> <code>archival</code>  ClusterArchivalSpec  (Optional) <p>Archival allows Workflow Execution Event Histories and Visibility data backups for the temporal cluster.</p> <code>authorization</code>  AuthorizationSpec  (Optional) <p>Authorization allows authorization configuration for the temporal cluster.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalClusterStatus","title":"TemporalClusterStatus","text":"<p> (Appears on: TemporalCluster) </p> <p>TemporalClusterStatus defines the observed state of Cluster.</p> Field Description <code>version</code>  string  <p>Version holds the current temporal version.</p> <code>services</code>  []ServiceStatus  <p>Services holds all services statuses.</p> <code>persistence</code>  TemporalPersistenceStatus  <p>Persistence holds all datastores statuses.</p> <code>conditions</code>  []Kubernetes meta/v1.Condition  <p>Conditions represent the latest available observations of the Cluster state.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalNamespace","title":"TemporalNamespace","text":"<p>A TemporalNamespace creates a namespace in the targeted temporal cluster.</p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  TemporalNamespaceSpec  <code>clusterRef</code>  TemporalClusterReference  <p>Reference to the temporal cluster the namespace will be created.</p> <code>description</code>  string  (Optional) <p>Namespace description.</p> <code>ownerEmail</code>  string  (Optional) <p>Namespace owner email.</p> <code>retentionPeriod</code>  Kubernetes meta/v1.Duration  <p>RetentionPeriod to apply on closed workflow executions.</p> <code>data</code>  map[string]string  (Optional) <p>Data is a key-value map for any customized purpose.</p> <code>securityToken</code>  string  (Optional) <code>isGlobalNamespace</code>  bool  (Optional) <p>IsGlobalNamespace defines whether the namespace is a global namespace.</p> <code>clusters</code>  []string  (Optional) <p>List of clusters names to which the namespace can fail over. Only applicable if the namespace is a global namespace.</p> <code>activeClusterName</code>  string  (Optional) <p>The name of active Temporal Cluster. Only applicable if the namespace is a global namespace.</p> <code>allowDeletion</code>  bool  (Optional) <p>AllowDeletion makes the controller delete the Temporal namespace if the CRD is deleted.</p> <code>archival</code>  TemporalNamespaceArchivalSpec  (Optional) <p>Archival is a per-namespace archival configuration. If not set, the default cluster configuration is used.</p> <code>status</code>  TemporalNamespaceStatus"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalNamespaceArchivalSpec","title":"TemporalNamespaceArchivalSpec","text":"<p> (Appears on: TemporalNamespaceSpec) </p> <p>TemporalNamespaceArchivalSpec is a per-namespace archival configuration override.</p> Field Description <code>history</code>  ArchivalSpec  (Optional) <p>History is the config for this namespace history archival.</p> <code>visibility</code>  ArchivalSpec  (Optional) <p>Visibility is the config for this namespace visibility archival.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalNamespaceSpec","title":"TemporalNamespaceSpec","text":"<p> (Appears on: TemporalNamespace) </p> <p>TemporalNamespaceSpec defines the desired state of Namespace.</p> Field Description <code>clusterRef</code>  TemporalClusterReference  <p>Reference to the temporal cluster the namespace will be created.</p> <code>description</code>  string  (Optional) <p>Namespace description.</p> <code>ownerEmail</code>  string  (Optional) <p>Namespace owner email.</p> <code>retentionPeriod</code>  Kubernetes meta/v1.Duration  <p>RetentionPeriod to apply on closed workflow executions.</p> <code>data</code>  map[string]string  (Optional) <p>Data is a key-value map for any customized purpose.</p> <code>securityToken</code>  string  (Optional) <code>isGlobalNamespace</code>  bool  (Optional) <p>IsGlobalNamespace defines whether the namespace is a global namespace.</p> <code>clusters</code>  []string  (Optional) <p>List of clusters names to which the namespace can fail over. Only applicable if the namespace is a global namespace.</p> <code>activeClusterName</code>  string  (Optional) <p>The name of active Temporal Cluster. Only applicable if the namespace is a global namespace.</p> <code>allowDeletion</code>  bool  (Optional) <p>AllowDeletion makes the controller delete the Temporal namespace if the CRD is deleted.</p> <code>archival</code>  TemporalNamespaceArchivalSpec  (Optional) <p>Archival is a per-namespace archival configuration. If not set, the default cluster configuration is used.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalNamespaceStatus","title":"TemporalNamespaceStatus","text":"<p> (Appears on: TemporalNamespace) </p> <p>TemporalNamespaceStatus defines the observed state of Namespace.</p> Field Description <code>conditions</code>  []Kubernetes meta/v1.Condition  <p>Conditions represent the latest available observations of the Namespace state.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalPersistenceSpec","title":"TemporalPersistenceSpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>TemporalPersistenceSpec contains temporal persistence specifications.</p> Field Description <code>defaultStore</code>  DatastoreSpec  <p>DefaultStore holds the default datastore specs.</p> <code>visibilityStore</code>  DatastoreSpec  <p>VisibilityStore holds the visibility datastore specs.</p> <code>secondaryVisibilityStore</code>  DatastoreSpec  (Optional) <p>SecondaryVisibilityStore holds the secondary visibility datastore specs. Feature only available for clusters &gt;= 1.21.0.</p> <code>advancedVisibilityStore</code>  DatastoreSpec  (Optional) <p>AdvancedVisibilityStore holds the avanced visibility datastore specs.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalPersistenceStatus","title":"TemporalPersistenceStatus","text":"<p> (Appears on: TemporalClusterStatus) </p> <p>TemporalPersistenceStatus contains temporal persistence status.</p> Field Description <code>defaultStore</code>  DatastoreStatus  <p>DefaultStore holds the default datastore status.</p> <code>visibilityStore</code>  DatastoreStatus  <p>VisibilityStore holds the visibility datastore status.</p> <code>secondaryVisibilityStore</code>  DatastoreStatus  (Optional) <p>SecondaryVisibilityStore holds the secondary visibility datastore status.</p> <code>advancedVisibilityStore</code>  DatastoreStatus  (Optional) <p>AdvancedVisibilityStore holds the avanced visibility datastore status.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalUIIngressSpec","title":"TemporalUIIngressSpec","text":"<p> (Appears on: TemporalUISpec) </p> <p>TemporalUIIngressSpec contains all configurations options for the UI ingress.</p> Field Description <code>annotations</code>  map[string]string  <p>Annotations allows custom annotations on the ingress ressource.</p> <code>ingressClassName</code>  string  <p>IngressClassName is the name of the IngressClass the deployed ingress resource should use.</p> <code>hosts</code>  []string  <p>Host is the list of host the ingress should use.</p> <code>tls</code>  []Kubernetes networking/v1.IngressTLS  <p>TLS configuration.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalUISpec","title":"TemporalUISpec","text":"<p> (Appears on: TemporalClusterSpec) </p> <p>TemporalUISpec defines parameters for the temporal UI within a Temporal cluster deployment.</p> Field Description <code>enabled</code>  bool  (Optional) <p>Enabled defines if the operator should deploy the web ui alongside the cluster.</p> <code>version</code>  string  (Optional) <p>Version defines the temporal ui version the instance should run.</p> <code>image</code>  string  (Optional) <p>Image defines the temporal ui docker image the instance should run.</p> <code>replicas</code>  int32  (Optional) <p>Number of desired replicas for the ui. Default to 1.</p> <code>resources</code>  Kubernetes core/v1.ResourceRequirements  (Optional) <p>Compute Resources required by the ui. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</p> <code>overrides</code>  ServiceSpecOverride  (Optional) <p>Overrides adds some overrides to the resources deployed for the ui.</p> <code>ingress</code>  TemporalUIIngressSpec  (Optional) <p>Ingress is an optional ingress configuration for the UI. If lived empty, no ingress configuration will be created and the UI will only by available trough ClusterIP service.</p> <code>service</code>  ObjectMetaOverride  (Optional) <p>Service is an optional service resource configuration for the UI.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalWorkerProcessBuilder","title":"TemporalWorkerProcessBuilder","text":"<p> (Appears on: TemporalWorkerProcessSpec) </p> Field Description <code>enabled</code>  bool  <p>Enabled defines if the operator should build the temporal worker process.</p> <code>version</code>  string  <p>Version is the version of the image that will be used to build worker image.</p> <code>attempt</code>  int32  <p>BuildAttempt is the build attempt number of a given version</p> <code>image</code>  string  <p>Image is the image that will be used to build worker image.</p> <code>buildDir</code>  string  <p>BuildDir is the location of where the sources will be built.</p> <code>gitRepository</code>  GitRepositorySpec  <p>GitRepository specifies how to connect to Git source control.</p> <code>buildRegistry</code>  ContainerRegistryConfig  <p>BuildRegistry specifies how to connect to container registry.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalWorkerProcessSpec","title":"TemporalWorkerProcessSpec","text":"<p> (Appears on: TemporalWorkerProcess) </p> <p>TemporalWorkerProcessSpec defines the desired state of TemporalWorkerProcess.</p> Field Description <code>clusterRef</code>  TemporalClusterReference  <p>Reference to the temporal cluster the worker will connect to.</p> <code>version</code>  string  (Optional) <p>Version defines the worker process version.</p> <code>image</code>  string  <p>Image defines the temporal worker docker image the instance should run.</p> <code>jobTtlSecondsAfterFinished</code>  int32  (Optional) <p>JobTTLSecondsAfterFinished is amount of time to keep job pods after jobs are completed. Defaults to 300 seconds.</p> <code>replicas</code>  int32  (Optional) <p>Number of desired replicas. Default to 1.</p> <code>pullPolicy</code>  Kubernetes core/v1.PullPolicy  <p>Image pull policy for determining how to pull worker process images.</p> <code>imagePullSecrets</code>  []Kubernetes core/v1.LocalObjectReference  (Optional) <p>An optional list of references to secrets in the same namespace to use for pulling temporal images from registries.</p> <code>temporalNamespace</code>  string  <p>TemporalNamespace that worker will poll.</p> <code>builder</code>  TemporalWorkerProcessBuilder  <p>Builder is the configuration for building a TemporalWorkerProcess. THIS FEATURE IS HIGHLY EXPERIMENTAL.</p>"},{"location":"api/v1beta1/#temporal.io/v1beta1.TemporalWorkerProcessStatus","title":"TemporalWorkerProcessStatus","text":"<p> (Appears on: TemporalWorkerProcess) </p> <p>TemporalWorkerProcessStatus defines the observed state of TemporalWorkerProcess.</p> Field Description <code>created</code>  bool  (Optional) <p>Created indicates if the worker process image was created.</p> <code>ready</code>  bool  (Optional) <p>Ready defines if the worker process is ready.</p> <code>version</code>  string  (Optional) <p>Version is the version of the image that will be used to build worker image.</p> <code>attempt</code>  int32  (Optional) <p>BuildAttempt is the build attempt number of a given version</p> <code>conditions</code>  []Kubernetes meta/v1.Condition  <p>Conditions represent the latest available observations of the worker process state.</p> <p>This page was automatically generated with <code>gen-crd-api-reference-docs</code></p>"},{"location":"contributing/local-development/","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>kind</li> <li>tilt</li> <li>Golang</li> <li>kustomize</li> </ul>"},{"location":"contributing/local-development/#local-development","title":"Local Development","text":"<p>Tilt offers a simple way of creating a local development environment.</p>"},{"location":"contributing/local-development/#create-a-kind-cluster","title":"Create a kind cluster","text":"<p>Create a kind cluster with a local registry:</p> <pre><code>make dev-cluster\n</code></pre>"},{"location":"contributing/local-development/#generate","title":"Generate","text":"<p>Generate crd and docs when api is modified</p> <pre><code>make generate\n</code></pre>"},{"location":"contributing/local-development/#run-tilt","title":"Run Tilt","text":"<p>Then run:</p> <pre><code>tilt up\n</code></pre> <p>Now, Tilt will automatically reload the deployment to your local cluster every time you make a code change.</p>"},{"location":"contributing/publish-release/","title":"Publishing a new release","text":"<p>This document explains how to publish a new release.</p>"},{"location":"contributing/publish-release/#steps","title":"Steps","text":"<p>First of all, update the <code>VERSION</code> file with the desired release version. For instance: <pre><code>0.13.0\n</code></pre></p> <p>Then run: <code>make prepare-release</code></p> <p>Once done create a new release branch and submit a Pull Request:</p> <pre><code>VERSION=\"v$(cat VERSION)\"\ngit checkout -b release/$VERSION\ngit commit -am \"Prepare release $VERSION\"\ngit push origin release/$VERSION\ngh pr create --title \"Prepare release $VERSION\" --base main --head release/$VERSION\n</code></pre> <p>Once the PR has been approved and merged, publish a new tag from the <code>main</code> branch</p> <pre><code>git tag v0.13.0\ngit push origin --tags\n</code></pre> <p>Finish by creating a new release on Github.</p>"},{"location":"features/admin-tools/","title":"Admin tools","text":"<p>This page is WIP. Feel free to contribute on github.</p>"},{"location":"features/admin-tools/#enable-admintools-and-set-version","title":"Enable admintools and set version","text":"<p>Example: <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  # [...]\n  admintools:\n    enabled: true\n    # You can specify the admin tools version if needed.\n    # Check available tag you can check by the link below\n    # https://hub.docker.com/r/temporalio/admin-tools/tags\n    version: 1.20.3\n</code></pre></p>"},{"location":"features/archival/","title":"Archival","text":"<p>Temporal-operator supports configuring archival for Temporal clusters. You can get more informations about Event histories backup on Temporal documentation. The operator supports the following providers:</p> <ul> <li>AWS s3 (and any s3-compatible provider)</li> <li>Google Cloud storage</li> <li>Filestore</li> </ul>"},{"location":"features/archival/#set-up-archival-using-s3-on-an-amazon-eks-cluster","title":"Set up Archival using S3 on an Amazon EKS cluster","text":"<p>On EKS clusters, to connect and archive data with s3 you first need to create an IAM role with enough permissions to upload files to s3.</p> <p>First, create an IAM role with the following s3 policy:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObjectAcl\",\n                \"s3:PutObject\",\n                \"s3:GetObjectVersion\",\n                \"s3:GetObject\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::&lt;bucket_name&gt;/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"s3:ListBucket\",\n            \"Resource\": \"arn:aws:s3:::&lt;bucket_name&gt;\"\n        }\n    ]\n}\n</code></pre> <p>Then create a trust relationships for your EKS cluster:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Federated\": \"arn:aws:iam::&lt;account_id&gt;:oidc-provider/oidc.eks.&lt;aws_region&gt;.amazonaws.com/id/&lt;cluster_id&gt;\"\n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"oidc.eks.&lt;aws_region&gt;.amazonaws.com/id/&lt;cluster_id&gt;:sub\": [\"system:serviceaccount:&lt;temporal_ns&gt;:&lt;temporal_history_sa&gt;\"]\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Then create a TemporalCluster with archival enabled and specify the role name you want to use:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.21.3\n  numHistoryShards: 1\n  # [...]\n  archival:\n    enabled: true\n    provider:\n      s3:\n        roleName: \"arn:aws:iam::&lt;account_id&gt;:role/&lt;aws_iam_role_id&gt;\"\n        region: eu-west-1\n    history:\n      enabled: true\n      enableRead: true\n      path: \"my-bucket-name\"\n      paused: false\n    visibility:\n      enabled: true\n      enableRead: true\n      path: \"my-bucket-name2\"\n      paused: false\n</code></pre>"},{"location":"features/archival/#set-up-archival-using-s3-on-an-s3-compatible-object-storage","title":"Set up Archival using S3 on an s3-compatible object storage","text":"<p>If you want to archive data on an s3-compatible object storage like OVHCloud Object storage or minio you have provide your credentials using a secret reference and then reference this secret in the TemporalCluster archival specifications. You also need to specify the s3 custom endpoint.</p> <pre><code>kubectl create secret generic archival-credentials --from-literal=AWS_ACCESS_KEY_ID=XXXX --from-literal=AWS_SECRET_ACCESS_KEY=XXXX -n demo\n</code></pre> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.21.3\n  numHistoryShards: 1\n  # [...]\n  archival:\n    enabled: true\n    provider:\n      s3:\n        region: gra\n        endpoint: s3.gra.io.cloud.ovh.net\n        credentials:\n            accessKeyIdRef:\n                name: archival-credentials\n                key: AWS_ACCESS_KEY_ID\n            secretKeyRef:\n                name: archival-credentials\n                key: AWS_SECRET_ACCESS_KEY\n    history:\n      enabled: true\n      enableRead: true\n      path: \"dev-temporal-archival\"\n      paused: false\n    visibility:\n      enabled: true\n      enableRead: true\n      path: \"dev-temporal-archival-visibility\"\n      paused: false\n</code></pre>"},{"location":"features/archival/#set-up-archival-using-filestore","title":"Set up Archival using Filestore","text":"<p>Warning: To use your the storage you desired for filestore archival, you'll need to use overrides.</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  version: 1.21.3\n  numHistoryShards: 1\n  # [...]\n  services:\n    overrides:\n      deployment:\n        spec:\n          template:\n            spec:\n              containers:\n                - name: service\n                  volumeMounts:\n                    - name: archival-data\n                      mountPath: /etc/archival\n              volumes:\n                - name: archival-data\n                  emptyDir: {}\n  archival:\n    enabled: true\n    provider:\n      filestore: {}\n    history:\n      enabled: true\n      enableRead: true\n      path: \"/etc/archival/history\"\n      paused: false\n    visibility:\n      enabled: true\n      enableRead: true\n      path: \"/etc/archival/visibility\"\n      paused: false\n</code></pre>"},{"location":"features/archival/#set-up-archival-using-gcs","title":"Set Up Archival using GCS","text":"<p>To use GCS archival you have to provide a secret containing your service account key. To create a service account and get a key you can follow the Google Cloud IAM documentation.</p> <p>Your service account should have enough rights to write to the bucket you provide to the <code>TemporalCluster</code>'s archival spec.</p> <p>Once your have downlaoded your service account key, create a secret containing this file:</p> <pre><code>kubectl create secret generic gcs-credentials --from-file=credentials.json=my-creds.json -n demo\n</code></pre> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.21.3\n  numHistoryShards: 1\n  # [...]\n  archival:\n    enabled: true\n    provider:\n      gcs:\n        credentialsRef:\n          name: gcs-credentials\n    history:\n      enabled: true\n      enableRead: true\n      path: \"temporal-operator-dev-default/temporal_archival/history\"\n    visibility:\n      enabled: true\n      enableRead: true\n      path: \"temporal-operator-dev-default/temporal_archival/visibility\"\n</code></pre>"},{"location":"features/dynamic-config/","title":"Using temporal server dynamic config.","text":"<p>For some usecases, you may want to use temporal server's dynamic config. You can set all your dynamic config under the field <code>spec.dynamicconfig.values</code>, the operator will save them in a configmap as-is, without applying any validation nor mutations.</p> <p>Example: <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  # [...]\n  dynamicConfig:\n    pollInterval: 10s\n    values:\n      matching.numTaskqueueReadPartitions:\n      - value: 5\n        constraints: {}\n      matching.numTaskqueueWritePartitions:\n      - value: 5\n        constraints: {}\n</code></pre></p>"},{"location":"features/overrides/","title":"Applying overrides to resources created by the operator","text":"<p>For some usecases, you may want to override some properites of temporal components. You can use this feature to:</p> <ul> <li>Set extra properties on created pod like custom resources limits and request</li> <li>Add sidecars on temporal services pods</li> <li>Add init containers on temporal services pods</li> <li>Mount extra volumes</li> <li>Get environment variable for secretRef</li> </ul> <p>Overrides allows you to override every fields you want in temporal services deployments.</p> <p>The API provides you the ability to apply your overrides:</p> <ul> <li>per temporal service (using <code>spec.services.[frontend|history|matching|worker].overrides</code>)</li> <li>for all services (using <code>spec.services.overrides</code>)</li> </ul>"},{"location":"features/overrides/#overrides-for-all-services","title":"Overrides for all services","text":"<p>Here is a general example:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    overrides:\n      deployment:\n        metadata:\n          labels: {}\n          annotations: {}\n        spec:\n          template:\n            spec:\n              containers:\n                - name: service\n                # anything you want\n</code></pre>"},{"location":"features/overrides/#example-mount-an-extra-volume-to-all-pods","title":"Example: mount an extra volume to all pods","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  services:\n    overrides:\n      deployment:\n        spec:\n          template:\n            spec:\n              containers:\n                - name: service\n                  volumeMounts:\n                    - name: extra-volume\n                      mountPath: /etc/extra\n              volumes:\n                - name: extra-volume\n                  configMap:\n                    name: extra-config\n</code></pre>"},{"location":"features/overrides/#example-add-sidecar-to-all-pods","title":"Example: add sidecar to all pods","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    overrides:\n      deployment:\n        spec:\n          template:\n            spec:\n              containers:\n                - name: my-sidecar\n                  image: busybox\n                  command: [\"sh\",\"-c\",\"while true; do echo 'Hello from sidecar'; sleep 30; done\"]\n</code></pre>"},{"location":"features/overrides/#example-add-init-container-to-all-pods","title":"Example: add init container to all pods","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  # [...]\n  services:\n    overrides:\n      deployment:\n        spec:\n          template:\n            spec:\n              initContainers:\n              - name: init-myservice\n                image: busybox:1.28\n                command: ['sh', '-c', \"echo My example init container\"]\n</code></pre>"},{"location":"features/overrides/#example-override-containers-resources","title":"Example: Override containers resources","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    overrides:\n      deployment:\n        spec:\n          template:\n            spec:\n              containers:\n                - name: service\n                  resources:\n                    limits:\n                      cpu: 500m\n                      memory: 500Mi\n                    requests:\n                      cpu: 500m\n                      memory: 500Mi\n</code></pre>"},{"location":"features/overrides/#overrides-per-temporal-service","title":"Overrides per temporal service","text":"<p>Here is a general example:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    [service name]:\n      overrides:\n        deployment:\n          metadata:\n            labels: {}\n            annotations: {}\n          spec:\n            template:\n              spec:\n                containers:\n                  - name: service\n                    # anything you want\n</code></pre>"},{"location":"features/overrides/#example-add-labels-to-the-frontend-pod","title":"Example: Add labels to the frontend pod","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    frontend:\n      overrides:\n        deployment:\n          spec:\n            template:\n              metadata:\n                labels:\n                    ad.datadoghq.com/&lt;CONTAINER_IDENTIFIER&gt;.checks: |\n                    {\n                        \"&lt;INTEGRATION_NAME&gt;\": {\n                        \"init_config\": &lt;INIT_CONFIG&gt;,\n                        \"instances\": [&lt;INSTANCE_CONFIG&gt;]\n                        }\n                    }\n</code></pre>"},{"location":"features/overrides/#example-add-an-environment-variable-to-the-worker-pod","title":"Example: Add an environment variable to the worker pod","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    worker:\n      overrides:\n        deployment:\n          spec:\n            template:\n              spec:\n                containers:\n                  - name: service\n                    env:\n                      - name: HTTP_PROXY\n                        value: example.com\n</code></pre>"},{"location":"features/overrides/#example-mount-an-extra-volume-to-the-frontend-pod","title":"Example: mount an extra volume to the frontend pod","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    frontend:\n      overrides:\n        deployment:\n          spec:\n            template:\n              spec:\n                containers:\n                  - name: service\n                    volumeMounts:\n                      - name: extra-volume\n                        mountPath: /etc/extra\n                volumes:\n                  - name: extra-volume\n                    configMap:\n                      name: extra-config\n</code></pre>"},{"location":"features/overrides/#example-add-an-environment-variable-from-secretref-to-the-frontend-pod","title":"Example: Add an environment variable from secretRef to the frontend pod","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\nspec:\n  # [...]\n  services:\n    frontend:\n      overrides:\n        deployment:\n          spec:\n            template:\n              spec:\n                containers:\n                  - name: service\n                    envFrom:\n                      - secretRef:\n                          name: frontend\n</code></pre>"},{"location":"features/overrides/#override-ui-deployment","title":"Override UI deployment","text":"<p>See Temporal UI / Override UI deployment</p>"},{"location":"features/temporal-ui/","title":"Temporal UI","text":"<p>This page is WIP. Feel free to contribute on github.</p>"},{"location":"features/temporal-ui/#enable-ui-and-set-version","title":"Enable UI and set version","text":"<p>Example:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  # [...]\n  ui:\n    enabled: true\n    # You can specify ui version if needed.\n    # Check available tag you can check by link below\n    # https://hub.docker.com/r/temporalio/ui/tags\n    version: 2.15.0\n</code></pre>"},{"location":"features/temporal-ui/#create-ingress","title":"Create Ingress","text":"<p>Example:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  # [...]\n  ui:\n    enabled: true\n    version: 2.15.0\n    ingress:\n      hosts:\n        - example.com\n      annotations:\n        &lt;annotations&gt;\n</code></pre>"},{"location":"features/temporal-ui/#set-ui-replicas-and-resources","title":"Set UI replicas and resources","text":"<p>Example:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  # [...]\n  ui:\n    enabled: true\n    version: 2.15.0\n    replicas: 1\n    resources:\n      limits:\n        cpu: 10m\n        memory: 20Mi\n      requests:\n        cpu: 10m\n        memory: 20Mi\n</code></pre>"},{"location":"features/temporal-ui/#override-ui-deployment","title":"Override UI deployment","text":"<p>Example:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.21.2\n  numHistoryShards: 1\n  ui:\n    enabled: true\n    overrides:\n      deployment:\n        spec:\n          template:\n            spec:\n              containers:\n                - name: ui\n                  env:\n                    - name: TEMPORAL_SHOW_TEMPORAL_SYSTEM_NAMESPACE\n                      value: \"true\"\n</code></pre>"},{"location":"features/monitoring/prometheus-operator/","title":"Monitoring temporal using prometheus-operator","text":"<p>The operator provides support for prometheus-operator to monitor your Temporal cluster. When metrics exposition is enabled with prometheus and serviceMonitor, the operator create a ServiceMonitor for each temporal components (frontend, history, matching &amp; worker).</p>"},{"location":"features/monitoring/prometheus-operator/#enabling-metrics-exposition-to-prometheus-using-prometheus-operator","title":"Enabling metrics exposition to prometheus using prometheus-operator","text":"<p>First of all, your need the prometheus operator running in your cluster, if not you can install a development version on your cluster:</p> <pre><code>helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\nhelm install prometheus-operator prometheus-community/kube-prometheus-stack --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false --set=prometheusOperator.namespaces.additional={demo,default,}\n</code></pre> <p>Then create your temporal cluster and enable the <code>ServiceMonitor</code> creation:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  # [...]\n  metrics:\n    enabled: true\n    prometheus:\n      listenPort: 9090\n      scrapeConfig:\n        serviceMonitor:\n          enabled: true\n</code></pre> <p>That's all, Prometheus is now scraping temporal components.  You can find some grafana dashboards in the official temporal dashboard repository.</p>"},{"location":"features/monitoring/prometheus-operator/#relabeling-metrics","title":"Relabeling metrics","text":"<p>For some use cases, you may want to add relabelConfig to the created <code>ServiceMonitors</code>.  You can use the <code>spec.metrics.prometheus.scrapeConfig.serviceMonitor.metricRelabelings</code> field.</p> <p>For instance, to prefix all metrics:</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  # [...]\n  metrics:\n    enabled: true\n    prometheus:\n      listenPort: 9090\n      scrapeConfig:\n        serviceMonitor:\n          enabled: true\n          metricRelabelings:\n          - sourceLabels: [__name__]\n            targetLabel: __name__\n            replacement: temporal_$1\n</code></pre> <p>To see all the features provided by this field check the <code>monitoring.coreos.com/v1.RelabelConfig</code> API reference on prometheus-operator website.</p>"},{"location":"features/monitoring/prometheus/","title":"Monitoring temporal using Prometheus","text":"<p>The operator provides support for prometheus to monitor your Temporal cluster. When metrics exposition is enabled, the operator adds prometheus service discovery annotations on each temporal components:</p> <ul> <li><code>prometheus.io/scrape</code></li> <li><code>prometheus.io/scheme</code></li> <li><code>prometheus.io/path</code></li> <li><code>prometheus.io/port</code></li> </ul> <p>If you're using prometheus-operator, please check the dedicated documentation page: Monitoring temporal using prometheus-operator</p>"},{"location":"features/monitoring/prometheus/#enabling-metrics-exposition-using-prometheus-annotations","title":"Enabling metrics exposition using prometheus annotations","text":"<pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n  version: 1.20.0\n  numHistoryShards: 1\n  # [...]\n  metrics:\n    enabled: true\n    prometheus:\n      listenPort: 9090\n      scrapeConfig:\n        annotations: true\n</code></pre>"},{"location":"features/mtls/cert-manager/","title":"mTLS using cert-manager","text":"<p>When you enable mTLS in the operator using the following configuration, the operator asks cert-manager to generate some certificates for you. Cert-manager will then take care to renew them.</p> <pre><code>  mTLS:\n    provider: cert-manager\n    internode:\n      enabled: true\n    frontend:\n      enabled: true\n    certificatesDuration:\n      rootCACertificate: 2h\n      intermediateCAsCertificates: 1h30m\n      clientCertificates: 1h\n      frontendCertificate: 1h\n      internodeCertificate: 1h\n    refreshInterval: 5m\n</code></pre>"},{"location":"features/mtls/cert-manager/#overview","title":"Overview","text":"<p>Here is a diagram of cert-manager's resources created by the operator and their hierarchy:</p> <p></p>"},{"location":"features/mtls/istio/","title":"mTLS using istio","text":"<p>The temporal operator supports mTLS using istio. To use istio and enforce mTLS you only have set <code>istio</code> as mTLS provider.</p> <pre><code>apiVersion: temporal.io/v1beta1\nkind: TemporalCluster\nmetadata:\n  name: prod\n  namespace: demo\nspec:\n# [...]\n  mTLS:\n    provider: istio\n# [...]\n</code></pre> <p>The Operator creates for each temporal services a <code>DestinationRule</code> and a <code>PeerAuthentication</code>. They both ensure mutual and strict mTLS.</p>"},{"location":"features/mtls/linkerd/","title":"Linkerd","text":"<p>This page is WIP. Feel free to contribute on github.</p>"}]}